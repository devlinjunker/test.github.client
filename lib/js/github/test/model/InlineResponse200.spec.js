/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 0.0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GitHubV3RestApi);
  }
}(this, function(expect, GitHubV3RestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GitHubV3RestApi.InlineResponse200();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('InlineResponse200', function() {
    it('should create an instance of InlineResponse200', function() {
      // uncomment below and update the code to test InlineResponse200
      //var instane = new GitHubV3RestApi.InlineResponse200();
      //expect(instance).to.be.a(GitHubV3RestApi.InlineResponse200);
    });

    it('should have the property authorizationsUrl (base name: "authorizations_url")', function() {
      // uncomment below and update the code to test the property authorizationsUrl
      //var instane = new GitHubV3RestApi.InlineResponse200();
      //expect(instance).to.be();
    });

    it('should have the property codeSearchUrl (base name: "code_search_url")', function() {
      // uncomment below and update the code to test the property codeSearchUrl
      //var instane = new GitHubV3RestApi.InlineResponse200();
      //expect(instance).to.be();
    });

    it('should have the property commitSearchUrl (base name: "commit_search_url")', function() {
      // uncomment below and update the code to test the property commitSearchUrl
      //var instane = new GitHubV3RestApi.InlineResponse200();
      //expect(instance).to.be();
    });

    it('should have the property currentUserAuthorizationsHtmlUrl (base name: "current_user_authorizations_html_url")', function() {
      // uncomment below and update the code to test the property currentUserAuthorizationsHtmlUrl
      //var instane = new GitHubV3RestApi.InlineResponse200();
      //expect(instance).to.be();
    });

    it('should have the property currentUserRepositoriesUrl (base name: "current_user_repositories_url")', function() {
      // uncomment below and update the code to test the property currentUserRepositoriesUrl
      //var instane = new GitHubV3RestApi.InlineResponse200();
      //expect(instance).to.be();
    });

    it('should have the property currentUserUrl (base name: "current_user_url")', function() {
      // uncomment below and update the code to test the property currentUserUrl
      //var instane = new GitHubV3RestApi.InlineResponse200();
      //expect(instance).to.be();
    });

    it('should have the property emailsUrl (base name: "emails_url")', function() {
      // uncomment below and update the code to test the property emailsUrl
      //var instane = new GitHubV3RestApi.InlineResponse200();
      //expect(instance).to.be();
    });

    it('should have the property emojisUrl (base name: "emojis_url")', function() {
      // uncomment below and update the code to test the property emojisUrl
      //var instane = new GitHubV3RestApi.InlineResponse200();
      //expect(instance).to.be();
    });

    it('should have the property eventsUrl (base name: "events_url")', function() {
      // uncomment below and update the code to test the property eventsUrl
      //var instane = new GitHubV3RestApi.InlineResponse200();
      //expect(instance).to.be();
    });

    it('should have the property feedsUrl (base name: "feeds_url")', function() {
      // uncomment below and update the code to test the property feedsUrl
      //var instane = new GitHubV3RestApi.InlineResponse200();
      //expect(instance).to.be();
    });

    it('should have the property followersUrl (base name: "followers_url")', function() {
      // uncomment below and update the code to test the property followersUrl
      //var instane = new GitHubV3RestApi.InlineResponse200();
      //expect(instance).to.be();
    });

    it('should have the property followingUrl (base name: "following_url")', function() {
      // uncomment below and update the code to test the property followingUrl
      //var instane = new GitHubV3RestApi.InlineResponse200();
      //expect(instance).to.be();
    });

    it('should have the property gistsUrl (base name: "gists_url")', function() {
      // uncomment below and update the code to test the property gistsUrl
      //var instane = new GitHubV3RestApi.InlineResponse200();
      //expect(instance).to.be();
    });

    it('should have the property hubUrl (base name: "hub_url")', function() {
      // uncomment below and update the code to test the property hubUrl
      //var instane = new GitHubV3RestApi.InlineResponse200();
      //expect(instance).to.be();
    });

    it('should have the property issueSearchUrl (base name: "issue_search_url")', function() {
      // uncomment below and update the code to test the property issueSearchUrl
      //var instane = new GitHubV3RestApi.InlineResponse200();
      //expect(instance).to.be();
    });

    it('should have the property issuesUrl (base name: "issues_url")', function() {
      // uncomment below and update the code to test the property issuesUrl
      //var instane = new GitHubV3RestApi.InlineResponse200();
      //expect(instance).to.be();
    });

    it('should have the property keysUrl (base name: "keys_url")', function() {
      // uncomment below and update the code to test the property keysUrl
      //var instane = new GitHubV3RestApi.InlineResponse200();
      //expect(instance).to.be();
    });

    it('should have the property labelSearchUrl (base name: "label_search_url")', function() {
      // uncomment below and update the code to test the property labelSearchUrl
      //var instane = new GitHubV3RestApi.InlineResponse200();
      //expect(instance).to.be();
    });

    it('should have the property notificationsUrl (base name: "notifications_url")', function() {
      // uncomment below and update the code to test the property notificationsUrl
      //var instane = new GitHubV3RestApi.InlineResponse200();
      //expect(instance).to.be();
    });

    it('should have the property organizationRepositoriesUrl (base name: "organization_repositories_url")', function() {
      // uncomment below and update the code to test the property organizationRepositoriesUrl
      //var instane = new GitHubV3RestApi.InlineResponse200();
      //expect(instance).to.be();
    });

    it('should have the property organizationTeamsUrl (base name: "organization_teams_url")', function() {
      // uncomment below and update the code to test the property organizationTeamsUrl
      //var instane = new GitHubV3RestApi.InlineResponse200();
      //expect(instance).to.be();
    });

    it('should have the property organizationUrl (base name: "organization_url")', function() {
      // uncomment below and update the code to test the property organizationUrl
      //var instane = new GitHubV3RestApi.InlineResponse200();
      //expect(instance).to.be();
    });

    it('should have the property publicGistsUrl (base name: "public_gists_url")', function() {
      // uncomment below and update the code to test the property publicGistsUrl
      //var instane = new GitHubV3RestApi.InlineResponse200();
      //expect(instance).to.be();
    });

    it('should have the property rateLimitUrl (base name: "rate_limit_url")', function() {
      // uncomment below and update the code to test the property rateLimitUrl
      //var instane = new GitHubV3RestApi.InlineResponse200();
      //expect(instance).to.be();
    });

    it('should have the property repositorySearchUrl (base name: "repository_search_url")', function() {
      // uncomment below and update the code to test the property repositorySearchUrl
      //var instane = new GitHubV3RestApi.InlineResponse200();
      //expect(instance).to.be();
    });

    it('should have the property repositoryUrl (base name: "repository_url")', function() {
      // uncomment below and update the code to test the property repositoryUrl
      //var instane = new GitHubV3RestApi.InlineResponse200();
      //expect(instance).to.be();
    });

    it('should have the property starredGistsUrl (base name: "starred_gists_url")', function() {
      // uncomment below and update the code to test the property starredGistsUrl
      //var instane = new GitHubV3RestApi.InlineResponse200();
      //expect(instance).to.be();
    });

    it('should have the property starredUrl (base name: "starred_url")', function() {
      // uncomment below and update the code to test the property starredUrl
      //var instane = new GitHubV3RestApi.InlineResponse200();
      //expect(instance).to.be();
    });

    it('should have the property topicSearchUrl (base name: "topic_search_url")', function() {
      // uncomment below and update the code to test the property topicSearchUrl
      //var instane = new GitHubV3RestApi.InlineResponse200();
      //expect(instance).to.be();
    });

    it('should have the property userOrganizationsUrl (base name: "user_organizations_url")', function() {
      // uncomment below and update the code to test the property userOrganizationsUrl
      //var instane = new GitHubV3RestApi.InlineResponse200();
      //expect(instance).to.be();
    });

    it('should have the property userRepositoriesUrl (base name: "user_repositories_url")', function() {
      // uncomment below and update the code to test the property userRepositoriesUrl
      //var instane = new GitHubV3RestApi.InlineResponse200();
      //expect(instance).to.be();
    });

    it('should have the property userSearchUrl (base name: "user_search_url")', function() {
      // uncomment below and update the code to test the property userSearchUrl
      //var instane = new GitHubV3RestApi.InlineResponse200();
      //expect(instance).to.be();
    });

    it('should have the property userUrl (base name: "user_url")', function() {
      // uncomment below and update the code to test the property userUrl
      //var instane = new GitHubV3RestApi.InlineResponse200();
      //expect(instance).to.be();
    });

  });

}));

/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 0.0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GitHubV3RestApi);
  }
}(this, function(expect, GitHubV3RestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GitHubV3RestApi.ModelImport();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ModelImport', function() {
    it('should create an instance of ModelImport', function() {
      // uncomment below and update the code to test ModelImport
      //var instane = new GitHubV3RestApi.ModelImport();
      //expect(instance).to.be.a(GitHubV3RestApi.ModelImport);
    });

    it('should have the property authorsCount (base name: "authors_count")', function() {
      // uncomment below and update the code to test the property authorsCount
      //var instane = new GitHubV3RestApi.ModelImport();
      //expect(instance).to.be();
    });

    it('should have the property authorsUrl (base name: "authors_url")', function() {
      // uncomment below and update the code to test the property authorsUrl
      //var instane = new GitHubV3RestApi.ModelImport();
      //expect(instance).to.be();
    });

    it('should have the property commitCount (base name: "commit_count")', function() {
      // uncomment below and update the code to test the property commitCount
      //var instane = new GitHubV3RestApi.ModelImport();
      //expect(instance).to.be();
    });

    it('should have the property errorMessage (base name: "error_message")', function() {
      // uncomment below and update the code to test the property errorMessage
      //var instane = new GitHubV3RestApi.ModelImport();
      //expect(instance).to.be();
    });

    it('should have the property failedStep (base name: "failed_step")', function() {
      // uncomment below and update the code to test the property failedStep
      //var instane = new GitHubV3RestApi.ModelImport();
      //expect(instance).to.be();
    });

    it('should have the property hasLargeFiles (base name: "has_large_files")', function() {
      // uncomment below and update the code to test the property hasLargeFiles
      //var instane = new GitHubV3RestApi.ModelImport();
      //expect(instance).to.be();
    });

    it('should have the property htmlUrl (base name: "html_url")', function() {
      // uncomment below and update the code to test the property htmlUrl
      //var instane = new GitHubV3RestApi.ModelImport();
      //expect(instance).to.be();
    });

    it('should have the property importPercent (base name: "import_percent")', function() {
      // uncomment below and update the code to test the property importPercent
      //var instane = new GitHubV3RestApi.ModelImport();
      //expect(instance).to.be();
    });

    it('should have the property largeFilesCount (base name: "large_files_count")', function() {
      // uncomment below and update the code to test the property largeFilesCount
      //var instane = new GitHubV3RestApi.ModelImport();
      //expect(instance).to.be();
    });

    it('should have the property largeFilesSize (base name: "large_files_size")', function() {
      // uncomment below and update the code to test the property largeFilesSize
      //var instane = new GitHubV3RestApi.ModelImport();
      //expect(instance).to.be();
    });

    it('should have the property message (base name: "message")', function() {
      // uncomment below and update the code to test the property message
      //var instane = new GitHubV3RestApi.ModelImport();
      //expect(instance).to.be();
    });

    it('should have the property projectChoices (base name: "project_choices")', function() {
      // uncomment below and update the code to test the property projectChoices
      //var instane = new GitHubV3RestApi.ModelImport();
      //expect(instance).to.be();
    });

    it('should have the property pushPercent (base name: "push_percent")', function() {
      // uncomment below and update the code to test the property pushPercent
      //var instane = new GitHubV3RestApi.ModelImport();
      //expect(instance).to.be();
    });

    it('should have the property repositoryUrl (base name: "repository_url")', function() {
      // uncomment below and update the code to test the property repositoryUrl
      //var instane = new GitHubV3RestApi.ModelImport();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instane = new GitHubV3RestApi.ModelImport();
      //expect(instance).to.be();
    });

    it('should have the property statusText (base name: "status_text")', function() {
      // uncomment below and update the code to test the property statusText
      //var instane = new GitHubV3RestApi.ModelImport();
      //expect(instance).to.be();
    });

    it('should have the property svcRoot (base name: "svc_root")', function() {
      // uncomment below and update the code to test the property svcRoot
      //var instane = new GitHubV3RestApi.ModelImport();
      //expect(instance).to.be();
    });

    it('should have the property svnRoot (base name: "svn_root")', function() {
      // uncomment below and update the code to test the property svnRoot
      //var instane = new GitHubV3RestApi.ModelImport();
      //expect(instance).to.be();
    });

    it('should have the property tfvcProject (base name: "tfvc_project")', function() {
      // uncomment below and update the code to test the property tfvcProject
      //var instane = new GitHubV3RestApi.ModelImport();
      //expect(instance).to.be();
    });

    it('should have the property url (base name: "url")', function() {
      // uncomment below and update the code to test the property url
      //var instane = new GitHubV3RestApi.ModelImport();
      //expect(instance).to.be();
    });

    it('should have the property useLfs (base name: "use_lfs")', function() {
      // uncomment below and update the code to test the property useLfs
      //var instane = new GitHubV3RestApi.ModelImport();
      //expect(instance).to.be();
    });

    it('should have the property vcs (base name: "vcs")', function() {
      // uncomment below and update the code to test the property vcs
      //var instane = new GitHubV3RestApi.ModelImport();
      //expect(instance).to.be();
    });

    it('should have the property vcsUrl (base name: "vcs_url")', function() {
      // uncomment below and update the code to test the property vcsUrl
      //var instane = new GitHubV3RestApi.ModelImport();
      //expect(instance).to.be();
    });

  });

}));

/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 0.0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GitHubV3RestApi);
  }
}(this, function(expect, GitHubV3RestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GitHubV3RestApi.IssueEventForIssue();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('IssueEventForIssue', function() {
    it('should create an instance of IssueEventForIssue', function() {
      // uncomment below and update the code to test IssueEventForIssue
      //var instane = new GitHubV3RestApi.IssueEventForIssue();
      //expect(instance).to.be.a(GitHubV3RestApi.IssueEventForIssue);
    });

    it('should have the property actor (base name: "actor")', function() {
      // uncomment below and update the code to test the property actor
      //var instane = new GitHubV3RestApi.IssueEventForIssue();
      //expect(instance).to.be();
    });

    it('should have the property authorAssociation (base name: "author_association")', function() {
      // uncomment below and update the code to test the property authorAssociation
      //var instane = new GitHubV3RestApi.IssueEventForIssue();
      //expect(instance).to.be();
    });

    it('should have the property body (base name: "body")', function() {
      // uncomment below and update the code to test the property body
      //var instane = new GitHubV3RestApi.IssueEventForIssue();
      //expect(instance).to.be();
    });

    it('should have the property bodyHtml (base name: "body_html")', function() {
      // uncomment below and update the code to test the property bodyHtml
      //var instane = new GitHubV3RestApi.IssueEventForIssue();
      //expect(instance).to.be();
    });

    it('should have the property bodyText (base name: "body_text")', function() {
      // uncomment below and update the code to test the property bodyText
      //var instane = new GitHubV3RestApi.IssueEventForIssue();
      //expect(instance).to.be();
    });

    it('should have the property commitId (base name: "commit_id")', function() {
      // uncomment below and update the code to test the property commitId
      //var instane = new GitHubV3RestApi.IssueEventForIssue();
      //expect(instance).to.be();
    });

    it('should have the property commitUrl (base name: "commit_url")', function() {
      // uncomment below and update the code to test the property commitUrl
      //var instane = new GitHubV3RestApi.IssueEventForIssue();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "created_at")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instane = new GitHubV3RestApi.IssueEventForIssue();
      //expect(instance).to.be();
    });

    it('should have the property event (base name: "event")', function() {
      // uncomment below and update the code to test the property event
      //var instane = new GitHubV3RestApi.IssueEventForIssue();
      //expect(instance).to.be();
    });

    it('should have the property htmlUrl (base name: "html_url")', function() {
      // uncomment below and update the code to test the property htmlUrl
      //var instane = new GitHubV3RestApi.IssueEventForIssue();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instane = new GitHubV3RestApi.IssueEventForIssue();
      //expect(instance).to.be();
    });

    it('should have the property issueUrl (base name: "issue_url")', function() {
      // uncomment below and update the code to test the property issueUrl
      //var instane = new GitHubV3RestApi.IssueEventForIssue();
      //expect(instance).to.be();
    });

    it('should have the property lockReason (base name: "lock_reason")', function() {
      // uncomment below and update the code to test the property lockReason
      //var instane = new GitHubV3RestApi.IssueEventForIssue();
      //expect(instance).to.be();
    });

    it('should have the property message (base name: "message")', function() {
      // uncomment below and update the code to test the property message
      //var instane = new GitHubV3RestApi.IssueEventForIssue();
      //expect(instance).to.be();
    });

    it('should have the property nodeId (base name: "node_id")', function() {
      // uncomment below and update the code to test the property nodeId
      //var instane = new GitHubV3RestApi.IssueEventForIssue();
      //expect(instance).to.be();
    });

    it('should have the property pullRequestUrl (base name: "pull_request_url")', function() {
      // uncomment below and update the code to test the property pullRequestUrl
      //var instane = new GitHubV3RestApi.IssueEventForIssue();
      //expect(instance).to.be();
    });

    it('should have the property sha (base name: "sha")', function() {
      // uncomment below and update the code to test the property sha
      //var instane = new GitHubV3RestApi.IssueEventForIssue();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "state")', function() {
      // uncomment below and update the code to test the property state
      //var instane = new GitHubV3RestApi.IssueEventForIssue();
      //expect(instance).to.be();
    });

    it('should have the property submittedAt (base name: "submitted_at")', function() {
      // uncomment below and update the code to test the property submittedAt
      //var instane = new GitHubV3RestApi.IssueEventForIssue();
      //expect(instance).to.be();
    });

    it('should have the property updatedAt (base name: "updated_at")', function() {
      // uncomment below and update the code to test the property updatedAt
      //var instane = new GitHubV3RestApi.IssueEventForIssue();
      //expect(instance).to.be();
    });

    it('should have the property url (base name: "url")', function() {
      // uncomment below and update the code to test the property url
      //var instane = new GitHubV3RestApi.IssueEventForIssue();
      //expect(instance).to.be();
    });

  });

}));

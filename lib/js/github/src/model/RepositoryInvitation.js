/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 0.0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MinimalRepository from './MinimalRepository';
import SimpleUser from './SimpleUser';

/**
 * The RepositoryInvitation model module.
 * @module model/RepositoryInvitation
 * @version 0.0.5
 */
class RepositoryInvitation {
    /**
     * Constructs a new <code>RepositoryInvitation</code>.
     * Repository invitations let you manage who you collaborate with.
     * @alias module:model/RepositoryInvitation
     * @param createdAt {Date} 
     * @param htmlUrl {String} 
     * @param id {Number} Unique identifier of the repository invitation.
     * @param invitee {module:model/SimpleUser} 
     * @param inviter {module:model/SimpleUser} 
     * @param nodeId {String} 
     * @param permissions {module:model/RepositoryInvitation.PermissionsEnum} The permission associated with the invitation.
     * @param repository {module:model/MinimalRepository} 
     * @param url {String} URL for the repository invitation
     */
    constructor(createdAt, htmlUrl, id, invitee, inviter, nodeId, permissions, repository, url) { 
        
        RepositoryInvitation.initialize(this, createdAt, htmlUrl, id, invitee, inviter, nodeId, permissions, repository, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, createdAt, htmlUrl, id, invitee, inviter, nodeId, permissions, repository, url) { 
        obj['created_at'] = createdAt;
        obj['html_url'] = htmlUrl;
        obj['id'] = id;
        obj['invitee'] = invitee;
        obj['inviter'] = inviter;
        obj['node_id'] = nodeId;
        obj['permissions'] = permissions;
        obj['repository'] = repository;
        obj['url'] = url;
    }

    /**
     * Constructs a <code>RepositoryInvitation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RepositoryInvitation} obj Optional instance to populate.
     * @return {module:model/RepositoryInvitation} The populated <code>RepositoryInvitation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RepositoryInvitation();

            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('html_url')) {
                obj['html_url'] = ApiClient.convertToType(data['html_url'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('invitee')) {
                obj['invitee'] = ApiClient.convertToType(data['invitee'], SimpleUser);
            }
            if (data.hasOwnProperty('inviter')) {
                obj['inviter'] = ApiClient.convertToType(data['inviter'], SimpleUser);
            }
            if (data.hasOwnProperty('node_id')) {
                obj['node_id'] = ApiClient.convertToType(data['node_id'], 'String');
            }
            if (data.hasOwnProperty('permissions')) {
                obj['permissions'] = ApiClient.convertToType(data['permissions'], 'String');
            }
            if (data.hasOwnProperty('repository')) {
                obj['repository'] = MinimalRepository.constructFromObject(data['repository']);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {Date} created_at
 */
RepositoryInvitation.prototype['created_at'] = undefined;

/**
 * @member {String} html_url
 */
RepositoryInvitation.prototype['html_url'] = undefined;

/**
 * Unique identifier of the repository invitation.
 * @member {Number} id
 */
RepositoryInvitation.prototype['id'] = undefined;

/**
 * @member {module:model/SimpleUser} invitee
 */
RepositoryInvitation.prototype['invitee'] = undefined;

/**
 * @member {module:model/SimpleUser} inviter
 */
RepositoryInvitation.prototype['inviter'] = undefined;

/**
 * @member {String} node_id
 */
RepositoryInvitation.prototype['node_id'] = undefined;

/**
 * The permission associated with the invitation.
 * @member {module:model/RepositoryInvitation.PermissionsEnum} permissions
 */
RepositoryInvitation.prototype['permissions'] = undefined;

/**
 * @member {module:model/MinimalRepository} repository
 */
RepositoryInvitation.prototype['repository'] = undefined;

/**
 * URL for the repository invitation
 * @member {String} url
 */
RepositoryInvitation.prototype['url'] = undefined;





/**
 * Allowed values for the <code>permissions</code> property.
 * @enum {String}
 * @readonly
 */
RepositoryInvitation['PermissionsEnum'] = {

    /**
     * value: "read"
     * @const
     */
    "read": "read",

    /**
     * value: "write"
     * @const
     */
    "write": "write",

    /**
     * value: "admin"
     * @const
     */
    "admin": "admin"
};



export default RepositoryInvitation;


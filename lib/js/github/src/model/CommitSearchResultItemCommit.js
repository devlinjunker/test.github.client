/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 0.0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CommitSearchResultItemCommitAuthor from './CommitSearchResultItemCommitAuthor';
import CommitSearchResultItemCommitTree from './CommitSearchResultItemCommitTree';
import GitUser from './GitUser';
import Verification from './Verification';

/**
 * The CommitSearchResultItemCommit model module.
 * @module model/CommitSearchResultItemCommit
 * @version 0.0.5
 */
class CommitSearchResultItemCommit {
    /**
     * Constructs a new <code>CommitSearchResultItemCommit</code>.
     * @alias module:model/CommitSearchResultItemCommit
     * @param author {module:model/CommitSearchResultItemCommitAuthor} 
     * @param commentCount {Number} 
     * @param committer {module:model/GitUser} 
     * @param message {String} 
     * @param tree {module:model/CommitSearchResultItemCommitTree} 
     * @param url {String} 
     */
    constructor(author, commentCount, committer, message, tree, url) { 
        
        CommitSearchResultItemCommit.initialize(this, author, commentCount, committer, message, tree, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, author, commentCount, committer, message, tree, url) { 
        obj['author'] = author;
        obj['comment_count'] = commentCount;
        obj['committer'] = committer;
        obj['message'] = message;
        obj['tree'] = tree;
        obj['url'] = url;
    }

    /**
     * Constructs a <code>CommitSearchResultItemCommit</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CommitSearchResultItemCommit} obj Optional instance to populate.
     * @return {module:model/CommitSearchResultItemCommit} The populated <code>CommitSearchResultItemCommit</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CommitSearchResultItemCommit();

            if (data.hasOwnProperty('author')) {
                obj['author'] = CommitSearchResultItemCommitAuthor.constructFromObject(data['author']);
            }
            if (data.hasOwnProperty('comment_count')) {
                obj['comment_count'] = ApiClient.convertToType(data['comment_count'], 'Number');
            }
            if (data.hasOwnProperty('committer')) {
                obj['committer'] = ApiClient.convertToType(data['committer'], GitUser);
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('tree')) {
                obj['tree'] = CommitSearchResultItemCommitTree.constructFromObject(data['tree']);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('verification')) {
                obj['verification'] = Verification.constructFromObject(data['verification']);
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/CommitSearchResultItemCommitAuthor} author
 */
CommitSearchResultItemCommit.prototype['author'] = undefined;

/**
 * @member {Number} comment_count
 */
CommitSearchResultItemCommit.prototype['comment_count'] = undefined;

/**
 * @member {module:model/GitUser} committer
 */
CommitSearchResultItemCommit.prototype['committer'] = undefined;

/**
 * @member {String} message
 */
CommitSearchResultItemCommit.prototype['message'] = undefined;

/**
 * @member {module:model/CommitSearchResultItemCommitTree} tree
 */
CommitSearchResultItemCommit.prototype['tree'] = undefined;

/**
 * @member {String} url
 */
CommitSearchResultItemCommit.prototype['url'] = undefined;

/**
 * @member {module:model/Verification} verification
 */
CommitSearchResultItemCommit.prototype['verification'] = undefined;






export default CommitSearchResultItemCommit;


/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 0.0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SimpleUser from './SimpleUser';

/**
 * The CodeScanningAlert model module.
 * @module model/CodeScanningAlert
 * @version 0.0.5
 */
class CodeScanningAlert {
    /**
     * Constructs a new <code>CodeScanningAlert</code>.
     * Code Scanning Alert
     * @alias module:model/CodeScanningAlert
     */
    constructor() { 
        
        CodeScanningAlert.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CodeScanningAlert</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CodeScanningAlert} obj Optional instance to populate.
     * @return {module:model/CodeScanningAlert} The populated <code>CodeScanningAlert</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CodeScanningAlert();

            if (data.hasOwnProperty('closed_at')) {
                obj['closed_at'] = ApiClient.convertToType(data['closed_at'], 'Date');
            }
            if (data.hasOwnProperty('closed_by')) {
                obj['closed_by'] = ApiClient.convertToType(data['closed_by'], SimpleUser);
            }
            if (data.hasOwnProperty('closed_reason')) {
                obj['closed_reason'] = ApiClient.convertToType(data['closed_reason'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('html_url')) {
                obj['html_url'] = ApiClient.convertToType(data['html_url'], 'String');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'Number');
            }
            if (data.hasOwnProperty('open')) {
                obj['open'] = ApiClient.convertToType(data['open'], 'Boolean');
            }
            if (data.hasOwnProperty('rule_description')) {
                obj['rule_description'] = ApiClient.convertToType(data['rule_description'], 'String');
            }
            if (data.hasOwnProperty('rule_id')) {
                obj['rule_id'] = ApiClient.convertToType(data['rule_id'], 'String');
            }
            if (data.hasOwnProperty('rule_severity')) {
                obj['rule_severity'] = ApiClient.convertToType(data['rule_severity'], 'String');
            }
            if (data.hasOwnProperty('tool')) {
                obj['tool'] = ApiClient.convertToType(data['tool'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {Date} closed_at
 */
CodeScanningAlert.prototype['closed_at'] = undefined;

/**
 * @member {module:model/SimpleUser} closed_by
 */
CodeScanningAlert.prototype['closed_by'] = undefined;

/**
 * @member {module:model/CodeScanningAlert.ClosedReasonEnum} closed_reason
 */
CodeScanningAlert.prototype['closed_reason'] = undefined;

/**
 * @member {Date} created_at
 */
CodeScanningAlert.prototype['created_at'] = undefined;

/**
 * @member {String} html_url
 */
CodeScanningAlert.prototype['html_url'] = undefined;

/**
 * @member {Number} number
 */
CodeScanningAlert.prototype['number'] = undefined;

/**
 * Whether or not the alert is open.
 * @member {Boolean} open
 */
CodeScanningAlert.prototype['open'] = undefined;

/**
 * A short description of the rule used to detect the alert.
 * @member {String} rule_description
 */
CodeScanningAlert.prototype['rule_description'] = undefined;

/**
 * A unique identifier for the rule used to detect the alert.
 * @member {String} rule_id
 */
CodeScanningAlert.prototype['rule_id'] = undefined;

/**
 * The severity of the alert.
 * @member {module:model/CodeScanningAlert.RuleSeverityEnum} rule_severity
 */
CodeScanningAlert.prototype['rule_severity'] = undefined;

/**
 * The name of the tool used to detect the alert.
 * @member {String} tool
 */
CodeScanningAlert.prototype['tool'] = undefined;

/**
 * @member {String} url
 */
CodeScanningAlert.prototype['url'] = undefined;





/**
 * Allowed values for the <code>closed_reason</code> property.
 * @enum {String}
 * @readonly
 */
CodeScanningAlert['ClosedReasonEnum'] = {

    /**
     * value: "false positive"
     * @const
     */
    "false positive": "false positive",

    /**
     * value: "won't fix"
     * @const
     */
    "won&#39;t fix": "won't fix",

    /**
     * value: "used in tests"
     * @const
     */
    "used in tests": "used in tests"
};


/**
 * Allowed values for the <code>rule_severity</code> property.
 * @enum {String}
 * @readonly
 */
CodeScanningAlert['RuleSeverityEnum'] = {

    /**
     * value: "none"
     * @const
     */
    "none": "none",

    /**
     * value: "note"
     * @const
     */
    "note": "note",

    /**
     * value: "warning"
     * @const
     */
    "warning": "warning",

    /**
     * value: "error"
     * @const
     */
    "error": "error"
};



export default CodeScanningAlert;


/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 0.0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The InlineObject117 model module.
 * @module model/InlineObject117
 * @version 0.0.5
 */
class InlineObject117 {
    /**
     * Constructs a new <code>InlineObject117</code>.
     * @alias module:model/InlineObject117
     */
    constructor() { 
        
        InlineObject117.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InlineObject117</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InlineObject117} obj Optional instance to populate.
     * @return {module:model/InlineObject117} The populated <code>InlineObject117</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InlineObject117();

            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], 'String');
            }
            if (data.hasOwnProperty('draft')) {
                obj['draft'] = ApiClient.convertToType(data['draft'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('prerelease')) {
                obj['prerelease'] = ApiClient.convertToType(data['prerelease'], 'Boolean');
            }
            if (data.hasOwnProperty('tag_name')) {
                obj['tag_name'] = ApiClient.convertToType(data['tag_name'], 'String');
            }
            if (data.hasOwnProperty('target_commitish')) {
                obj['target_commitish'] = ApiClient.convertToType(data['target_commitish'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Text describing the contents of the tag.
 * @member {String} body
 */
InlineObject117.prototype['body'] = undefined;

/**
 * `true` makes the release a draft, and `false` publishes the release.
 * @member {Boolean} draft
 */
InlineObject117.prototype['draft'] = undefined;

/**
 * The name of the release.
 * @member {String} name
 */
InlineObject117.prototype['name'] = undefined;

/**
 * `true` to identify the release as a prerelease, `false` to identify the release as a full release.
 * @member {Boolean} prerelease
 */
InlineObject117.prototype['prerelease'] = undefined;

/**
 * The name of the tag.
 * @member {String} tag_name
 */
InlineObject117.prototype['tag_name'] = undefined;

/**
 * Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`).
 * @member {String} target_commitish
 */
InlineObject117.prototype['target_commitish'] = undefined;






export default InlineObject117;


/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 0.0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SimpleUser from './SimpleUser';

/**
 * The GistComment model module.
 * @module model/GistComment
 * @version 0.0.5
 */
class GistComment {
    /**
     * Constructs a new <code>GistComment</code>.
     * A comment made to a gist.
     * @alias module:model/GistComment
     * @param authorAssociation {String} 
     * @param body {String} The comment text.
     * @param createdAt {Date} 
     * @param id {Number} 
     * @param nodeId {String} 
     * @param updatedAt {Date} 
     * @param url {String} 
     * @param user {module:model/SimpleUser} 
     */
    constructor(authorAssociation, body, createdAt, id, nodeId, updatedAt, url, user) { 
        
        GistComment.initialize(this, authorAssociation, body, createdAt, id, nodeId, updatedAt, url, user);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, authorAssociation, body, createdAt, id, nodeId, updatedAt, url, user) { 
        obj['author_association'] = authorAssociation;
        obj['body'] = body;
        obj['created_at'] = createdAt;
        obj['id'] = id;
        obj['node_id'] = nodeId;
        obj['updated_at'] = updatedAt;
        obj['url'] = url;
        obj['user'] = user;
    }

    /**
     * Constructs a <code>GistComment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GistComment} obj Optional instance to populate.
     * @return {module:model/GistComment} The populated <code>GistComment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GistComment();

            if (data.hasOwnProperty('author_association')) {
                obj['author_association'] = ApiClient.convertToType(data['author_association'], 'String');
            }
            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('node_id')) {
                obj['node_id'] = ApiClient.convertToType(data['node_id'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = ApiClient.convertToType(data['user'], SimpleUser);
            }
        }
        return obj;
    }


}

/**
 * @member {String} author_association
 */
GistComment.prototype['author_association'] = undefined;

/**
 * The comment text.
 * @member {String} body
 */
GistComment.prototype['body'] = undefined;

/**
 * @member {Date} created_at
 */
GistComment.prototype['created_at'] = undefined;

/**
 * @member {Number} id
 */
GistComment.prototype['id'] = undefined;

/**
 * @member {String} node_id
 */
GistComment.prototype['node_id'] = undefined;

/**
 * @member {Date} updated_at
 */
GistComment.prototype['updated_at'] = undefined;

/**
 * @member {String} url
 */
GistComment.prototype['url'] = undefined;

/**
 * @member {module:model/SimpleUser} user
 */
GistComment.prototype['user'] = undefined;






export default GistComment;


/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 0.0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContentFileLinks from './ContentFileLinks';
import ContentTreeEntries from './ContentTreeEntries';

/**
 * The ContentTree model module.
 * @module model/ContentTree
 * @version 0.0.5
 */
class ContentTree {
    /**
     * Constructs a new <code>ContentTree</code>.
     * Content Tree
     * @alias module:model/ContentTree
     * @param links {module:model/ContentFileLinks} 
     * @param downloadUrl {String} 
     * @param gitUrl {String} 
     * @param htmlUrl {String} 
     * @param name {String} 
     * @param path {String} 
     * @param sha {String} 
     * @param size {Number} 
     * @param type {String} 
     * @param url {String} 
     */
    constructor(links, downloadUrl, gitUrl, htmlUrl, name, path, sha, size, type, url) { 
        
        ContentTree.initialize(this, links, downloadUrl, gitUrl, htmlUrl, name, path, sha, size, type, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, links, downloadUrl, gitUrl, htmlUrl, name, path, sha, size, type, url) { 
        obj['_links'] = links;
        obj['download_url'] = downloadUrl;
        obj['git_url'] = gitUrl;
        obj['html_url'] = htmlUrl;
        obj['name'] = name;
        obj['path'] = path;
        obj['sha'] = sha;
        obj['size'] = size;
        obj['type'] = type;
        obj['url'] = url;
    }

    /**
     * Constructs a <code>ContentTree</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContentTree} obj Optional instance to populate.
     * @return {module:model/ContentTree} The populated <code>ContentTree</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContentTree();

            if (data.hasOwnProperty('_links')) {
                obj['_links'] = ContentFileLinks.constructFromObject(data['_links']);
            }
            if (data.hasOwnProperty('download_url')) {
                obj['download_url'] = ApiClient.convertToType(data['download_url'], 'String');
            }
            if (data.hasOwnProperty('entries')) {
                obj['entries'] = ApiClient.convertToType(data['entries'], [ContentTreeEntries]);
            }
            if (data.hasOwnProperty('git_url')) {
                obj['git_url'] = ApiClient.convertToType(data['git_url'], 'String');
            }
            if (data.hasOwnProperty('html_url')) {
                obj['html_url'] = ApiClient.convertToType(data['html_url'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('sha')) {
                obj['sha'] = ApiClient.convertToType(data['sha'], 'String');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/ContentFileLinks} _links
 */
ContentTree.prototype['_links'] = undefined;

/**
 * @member {String} download_url
 */
ContentTree.prototype['download_url'] = undefined;

/**
 * @member {Array.<module:model/ContentTreeEntries>} entries
 */
ContentTree.prototype['entries'] = undefined;

/**
 * @member {String} git_url
 */
ContentTree.prototype['git_url'] = undefined;

/**
 * @member {String} html_url
 */
ContentTree.prototype['html_url'] = undefined;

/**
 * @member {String} name
 */
ContentTree.prototype['name'] = undefined;

/**
 * @member {String} path
 */
ContentTree.prototype['path'] = undefined;

/**
 * @member {String} sha
 */
ContentTree.prototype['sha'] = undefined;

/**
 * @member {Number} size
 */
ContentTree.prototype['size'] = undefined;

/**
 * @member {String} type
 */
ContentTree.prototype['type'] = undefined;

/**
 * @member {String} url
 */
ContentTree.prototype['url'] = undefined;






export default ContentTree;


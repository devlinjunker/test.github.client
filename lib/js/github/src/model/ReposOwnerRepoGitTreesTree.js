/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 0.0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ReposOwnerRepoGitTreesTree model module.
 * @module model/ReposOwnerRepoGitTreesTree
 * @version 0.0.5
 */
class ReposOwnerRepoGitTreesTree {
    /**
     * Constructs a new <code>ReposOwnerRepoGitTreesTree</code>.
     * @alias module:model/ReposOwnerRepoGitTreesTree
     */
    constructor() { 
        
        ReposOwnerRepoGitTreesTree.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReposOwnerRepoGitTreesTree</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReposOwnerRepoGitTreesTree} obj Optional instance to populate.
     * @return {module:model/ReposOwnerRepoGitTreesTree} The populated <code>ReposOwnerRepoGitTreesTree</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReposOwnerRepoGitTreesTree();

            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], 'String');
            }
            if (data.hasOwnProperty('mode')) {
                obj['mode'] = ApiClient.convertToType(data['mode'], 'String');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('sha')) {
                obj['sha'] = ApiClient.convertToType(data['sha'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }


}

/**
 * The content you want this file to have. GitHub will write this blob out and use that SHA for this entry. Use either this, or `tree.sha`.      **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.
 * @member {String} content
 */
ReposOwnerRepoGitTreesTree.prototype['content'] = undefined;

/**
 * The file mode; one of `100644` for file (blob), `100755` for executable (blob), `040000` for subdirectory (tree), `160000` for submodule (commit), or `120000` for a blob that specifies the path of a symlink.
 * @member {module:model/ReposOwnerRepoGitTreesTree.ModeEnum} mode
 */
ReposOwnerRepoGitTreesTree.prototype['mode'] = undefined;

/**
 * The file referenced in the tree.
 * @member {String} path
 */
ReposOwnerRepoGitTreesTree.prototype['path'] = undefined;

/**
 * The SHA1 checksum ID of the object in the tree. Also called `tree.sha`. If the value is `null` then the file will be deleted.      **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.
 * @member {String} sha
 */
ReposOwnerRepoGitTreesTree.prototype['sha'] = undefined;

/**
 * Either `blob`, `tree`, or `commit`.
 * @member {module:model/ReposOwnerRepoGitTreesTree.TypeEnum} type
 */
ReposOwnerRepoGitTreesTree.prototype['type'] = undefined;





/**
 * Allowed values for the <code>mode</code> property.
 * @enum {String}
 * @readonly
 */
ReposOwnerRepoGitTreesTree['ModeEnum'] = {

    /**
     * value: "100644"
     * @const
     */
    "100644": "100644",

    /**
     * value: "100755"
     * @const
     */
    "100755": "100755",

    /**
     * value: "040000"
     * @const
     */
    "040000": "040000",

    /**
     * value: "160000"
     * @const
     */
    "160000": "160000",

    /**
     * value: "120000"
     * @const
     */
    "120000": "120000"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
ReposOwnerRepoGitTreesTree['TypeEnum'] = {

    /**
     * value: "blob"
     * @const
     */
    "blob": "blob",

    /**
     * value: "tree"
     * @const
     */
    "tree": "tree",

    /**
     * value: "commit"
     * @const
     */
    "commit": "commit"
};



export default ReposOwnerRepoGitTreesTree;


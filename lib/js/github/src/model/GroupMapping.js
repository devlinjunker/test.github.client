/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 0.0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GroupMappingGroups from './GroupMappingGroups';

/**
 * The GroupMapping model module.
 * @module model/GroupMapping
 * @version 0.0.5
 */
class GroupMapping {
    /**
     * Constructs a new <code>GroupMapping</code>.
     * External Groups to be mapped to a team for membership
     * @alias module:model/GroupMapping
     */
    constructor() { 
        
        GroupMapping.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GroupMapping</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GroupMapping} obj Optional instance to populate.
     * @return {module:model/GroupMapping} The populated <code>GroupMapping</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GroupMapping();

            if (data.hasOwnProperty('group_description')) {
                obj['group_description'] = ApiClient.convertToType(data['group_description'], 'String');
            }
            if (data.hasOwnProperty('group_id')) {
                obj['group_id'] = ApiClient.convertToType(data['group_id'], 'String');
            }
            if (data.hasOwnProperty('group_name')) {
                obj['group_name'] = ApiClient.convertToType(data['group_name'], 'String');
            }
            if (data.hasOwnProperty('groups')) {
                obj['groups'] = ApiClient.convertToType(data['groups'], [GroupMappingGroups]);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('synced_at')) {
                obj['synced_at'] = ApiClient.convertToType(data['synced_at'], 'String');
            }
        }
        return obj;
    }


}

/**
 * a description of the group
 * @member {String} group_description
 */
GroupMapping.prototype['group_description'] = undefined;

/**
 * The ID of the group
 * @member {String} group_id
 */
GroupMapping.prototype['group_id'] = undefined;

/**
 * The name of the group
 * @member {String} group_name
 */
GroupMapping.prototype['group_name'] = undefined;

/**
 * Array of groups to be mapped to this team
 * @member {Array.<module:model/GroupMappingGroups>} groups
 */
GroupMapping.prototype['groups'] = undefined;

/**
 * synchronization status for this group mapping
 * @member {String} status
 */
GroupMapping.prototype['status'] = undefined;

/**
 * the time of the last sync for this group-mapping
 * @member {String} synced_at
 */
GroupMapping.prototype['synced_at'] = undefined;






export default GroupMapping;


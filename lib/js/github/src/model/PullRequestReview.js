/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 0.0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PullRequestReviewLinks from './PullRequestReviewLinks';
import SimpleUser from './SimpleUser';

/**
 * The PullRequestReview model module.
 * @module model/PullRequestReview
 * @version 0.0.5
 */
class PullRequestReview {
    /**
     * Constructs a new <code>PullRequestReview</code>.
     * Pull Request Reviews are reviews on pull requests.
     * @alias module:model/PullRequestReview
     * @param links {module:model/PullRequestReviewLinks} 
     * @param authorAssociation {String} 
     * @param body {String} The text of the review.
     * @param commitId {String} A commit SHA for the review.
     * @param htmlUrl {String} 
     * @param id {Number} Unique identifier of the review
     * @param nodeId {String} 
     * @param pullRequestUrl {String} 
     * @param state {String} 
     * @param user {module:model/SimpleUser} 
     */
    constructor(links, authorAssociation, body, commitId, htmlUrl, id, nodeId, pullRequestUrl, state, user) { 
        
        PullRequestReview.initialize(this, links, authorAssociation, body, commitId, htmlUrl, id, nodeId, pullRequestUrl, state, user);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, links, authorAssociation, body, commitId, htmlUrl, id, nodeId, pullRequestUrl, state, user) { 
        obj['_links'] = links;
        obj['author_association'] = authorAssociation;
        obj['body'] = body;
        obj['commit_id'] = commitId;
        obj['html_url'] = htmlUrl;
        obj['id'] = id;
        obj['node_id'] = nodeId;
        obj['pull_request_url'] = pullRequestUrl;
        obj['state'] = state;
        obj['user'] = user;
    }

    /**
     * Constructs a <code>PullRequestReview</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PullRequestReview} obj Optional instance to populate.
     * @return {module:model/PullRequestReview} The populated <code>PullRequestReview</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PullRequestReview();

            if (data.hasOwnProperty('_links')) {
                obj['_links'] = PullRequestReviewLinks.constructFromObject(data['_links']);
            }
            if (data.hasOwnProperty('author_association')) {
                obj['author_association'] = ApiClient.convertToType(data['author_association'], 'String');
            }
            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], 'String');
            }
            if (data.hasOwnProperty('body_html')) {
                obj['body_html'] = ApiClient.convertToType(data['body_html'], 'String');
            }
            if (data.hasOwnProperty('body_text')) {
                obj['body_text'] = ApiClient.convertToType(data['body_text'], 'String');
            }
            if (data.hasOwnProperty('commit_id')) {
                obj['commit_id'] = ApiClient.convertToType(data['commit_id'], 'String');
            }
            if (data.hasOwnProperty('html_url')) {
                obj['html_url'] = ApiClient.convertToType(data['html_url'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('node_id')) {
                obj['node_id'] = ApiClient.convertToType(data['node_id'], 'String');
            }
            if (data.hasOwnProperty('pull_request_url')) {
                obj['pull_request_url'] = ApiClient.convertToType(data['pull_request_url'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('submitted_at')) {
                obj['submitted_at'] = ApiClient.convertToType(data['submitted_at'], 'Date');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = ApiClient.convertToType(data['user'], SimpleUser);
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/PullRequestReviewLinks} _links
 */
PullRequestReview.prototype['_links'] = undefined;

/**
 * @member {String} author_association
 */
PullRequestReview.prototype['author_association'] = undefined;

/**
 * The text of the review.
 * @member {String} body
 */
PullRequestReview.prototype['body'] = undefined;

/**
 * @member {String} body_html
 */
PullRequestReview.prototype['body_html'] = undefined;

/**
 * @member {String} body_text
 */
PullRequestReview.prototype['body_text'] = undefined;

/**
 * A commit SHA for the review.
 * @member {String} commit_id
 */
PullRequestReview.prototype['commit_id'] = undefined;

/**
 * @member {String} html_url
 */
PullRequestReview.prototype['html_url'] = undefined;

/**
 * Unique identifier of the review
 * @member {Number} id
 */
PullRequestReview.prototype['id'] = undefined;

/**
 * @member {String} node_id
 */
PullRequestReview.prototype['node_id'] = undefined;

/**
 * @member {String} pull_request_url
 */
PullRequestReview.prototype['pull_request_url'] = undefined;

/**
 * @member {String} state
 */
PullRequestReview.prototype['state'] = undefined;

/**
 * @member {Date} submitted_at
 */
PullRequestReview.prototype['submitted_at'] = undefined;

/**
 * @member {module:model/SimpleUser} user
 */
PullRequestReview.prototype['user'] = undefined;






export default PullRequestReview;


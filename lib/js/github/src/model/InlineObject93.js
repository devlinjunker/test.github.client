/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 0.0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The InlineObject93 model module.
 * @module model/InlineObject93
 * @version 0.0.5
 */
class InlineObject93 {
    /**
     * Constructs a new <code>InlineObject93</code>.
     * @alias module:model/InlineObject93
     */
    constructor() { 
        
        InlineObject93.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InlineObject93</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InlineObject93} obj Optional instance to populate.
     * @return {module:model/InlineObject93} The populated <code>InlineObject93</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InlineObject93();

            if (data.hasOwnProperty('color')) {
                obj['color'] = ApiClient.convertToType(data['color'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('new_name')) {
                obj['new_name'] = ApiClient.convertToType(data['new_name'], 'String');
            }
        }
        return obj;
    }


}

/**
 * The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.
 * @member {String} color
 */
InlineObject93.prototype['color'] = undefined;

/**
 * A short description of the label.
 * @member {String} description
 */
InlineObject93.prototype['description'] = undefined;

/**
 * The new name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png \":strawberry:\"). For a full list of available emoji and codes, see [emoji-cheat-sheet.com](http://emoji-cheat-sheet.com/).
 * @member {String} new_name
 */
InlineObject93.prototype['new_name'] = undefined;






export default InlineObject93;


/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 0.0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SimpleUser from './SimpleUser';

/**
 * The Integration model module.
 * @module model/Integration
 * @version 0.0.5
 */
class Integration {
    /**
     * Constructs a new <code>Integration</code>.
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     * @alias module:model/Integration
     * @extends Object
     * @param createdAt {Date} 
     * @param description {String} 
     * @param events {Array.<String>} The list of events for the GitHub app
     * @param externalUrl {String} 
     * @param htmlUrl {String} 
     * @param id {Number} Unique identifier of the GitHub app
     * @param name {String} The name of the GitHub app
     * @param nodeId {String} 
     * @param owner {module:model/SimpleUser} 
     * @param permissions {Object.<String, String>} The set of permissions for the GitHub app
     * @param updatedAt {Date} 
     */
    constructor(createdAt, description, events, externalUrl, htmlUrl, id, name, nodeId, owner, permissions, updatedAt) { 
        
        Integration.initialize(this, createdAt, description, events, externalUrl, htmlUrl, id, name, nodeId, owner, permissions, updatedAt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, createdAt, description, events, externalUrl, htmlUrl, id, name, nodeId, owner, permissions, updatedAt) { 
        obj['created_at'] = createdAt;
        obj['description'] = description;
        obj['events'] = events;
        obj['external_url'] = externalUrl;
        obj['html_url'] = htmlUrl;
        obj['id'] = id;
        obj['name'] = name;
        obj['node_id'] = nodeId;
        obj['owner'] = owner;
        obj['permissions'] = permissions;
        obj['updated_at'] = updatedAt;
    }

    /**
     * Constructs a <code>Integration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Integration} obj Optional instance to populate.
     * @return {module:model/Integration} The populated <code>Integration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Integration();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('client_id')) {
                obj['client_id'] = ApiClient.convertToType(data['client_id'], 'String');
            }
            if (data.hasOwnProperty('client_secret')) {
                obj['client_secret'] = ApiClient.convertToType(data['client_secret'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('events')) {
                obj['events'] = ApiClient.convertToType(data['events'], ['String']);
            }
            if (data.hasOwnProperty('external_url')) {
                obj['external_url'] = ApiClient.convertToType(data['external_url'], 'String');
            }
            if (data.hasOwnProperty('html_url')) {
                obj['html_url'] = ApiClient.convertToType(data['html_url'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('installations_count')) {
                obj['installations_count'] = ApiClient.convertToType(data['installations_count'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('node_id')) {
                obj['node_id'] = ApiClient.convertToType(data['node_id'], 'String');
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = ApiClient.convertToType(data['owner'], SimpleUser);
            }
            if (data.hasOwnProperty('pem')) {
                obj['pem'] = ApiClient.convertToType(data['pem'], 'String');
            }
            if (data.hasOwnProperty('permissions')) {
                obj['permissions'] = ApiClient.convertToType(data['permissions'], {'String': 'String'});
            }
            if (data.hasOwnProperty('slug')) {
                obj['slug'] = ApiClient.convertToType(data['slug'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('webhook_secret')) {
                obj['webhook_secret'] = ApiClient.convertToType(data['webhook_secret'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {String} client_id
 */
Integration.prototype['client_id'] = undefined;

/**
 * @member {String} client_secret
 */
Integration.prototype['client_secret'] = undefined;

/**
 * @member {Date} created_at
 */
Integration.prototype['created_at'] = undefined;

/**
 * @member {String} description
 */
Integration.prototype['description'] = undefined;

/**
 * The list of events for the GitHub app
 * @member {Array.<String>} events
 */
Integration.prototype['events'] = undefined;

/**
 * @member {String} external_url
 */
Integration.prototype['external_url'] = undefined;

/**
 * @member {String} html_url
 */
Integration.prototype['html_url'] = undefined;

/**
 * Unique identifier of the GitHub app
 * @member {Number} id
 */
Integration.prototype['id'] = undefined;

/**
 * The number of installations associated with the GitHub app
 * @member {Number} installations_count
 */
Integration.prototype['installations_count'] = undefined;

/**
 * The name of the GitHub app
 * @member {String} name
 */
Integration.prototype['name'] = undefined;

/**
 * @member {String} node_id
 */
Integration.prototype['node_id'] = undefined;

/**
 * @member {module:model/SimpleUser} owner
 */
Integration.prototype['owner'] = undefined;

/**
 * @member {String} pem
 */
Integration.prototype['pem'] = undefined;

/**
 * The set of permissions for the GitHub app
 * @member {Object.<String, String>} permissions
 */
Integration.prototype['permissions'] = undefined;

/**
 * The slug name of the GitHub app
 * @member {String} slug
 */
Integration.prototype['slug'] = undefined;

/**
 * @member {Date} updated_at
 */
Integration.prototype['updated_at'] = undefined;

/**
 * @member {String} webhook_secret
 */
Integration.prototype['webhook_secret'] = undefined;






export default Integration;


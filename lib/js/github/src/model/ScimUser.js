/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 0.0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ScimUserEmails from './ScimUserEmails';
import ScimUserMeta from './ScimUserMeta';
import ScimUserName from './ScimUserName';
import ScimUserOperations from './ScimUserOperations';

/**
 * The ScimUser model module.
 * @module model/ScimUser
 * @version 0.0.5
 */
class ScimUser {
    /**
     * Constructs a new <code>ScimUser</code>.
     * SCIM /Users provisioning endpoints
     * @alias module:model/ScimUser
     * @param active {Boolean} The active status of the User.
     * @param emails {Array.<module:model/ScimUserEmails>} user emails
     * @param externalId {String} The ID of the User.
     * @param id {String} Unique identifier of an external identity
     * @param meta {module:model/ScimUserMeta} 
     * @param name {module:model/ScimUserName} 
     * @param schemas {Array.<String>} SCIM schema used.
     * @param userName {String} Configured by the admin. Could be an email, login, or username
     */
    constructor(active, emails, externalId, id, meta, name, schemas, userName) { 
        
        ScimUser.initialize(this, active, emails, externalId, id, meta, name, schemas, userName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, active, emails, externalId, id, meta, name, schemas, userName) { 
        obj['active'] = active;
        obj['emails'] = emails;
        obj['externalId'] = externalId;
        obj['id'] = id;
        obj['meta'] = meta;
        obj['name'] = name;
        obj['schemas'] = schemas;
        obj['userName'] = userName;
    }

    /**
     * Constructs a <code>ScimUser</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ScimUser} obj Optional instance to populate.
     * @return {module:model/ScimUser} The populated <code>ScimUser</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ScimUser();

            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('emails')) {
                obj['emails'] = ApiClient.convertToType(data['emails'], [ScimUserEmails]);
            }
            if (data.hasOwnProperty('externalId')) {
                obj['externalId'] = ApiClient.convertToType(data['externalId'], 'String');
            }
            if (data.hasOwnProperty('groups')) {
                obj['groups'] = ApiClient.convertToType(data['groups'], [Object]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('meta')) {
                obj['meta'] = ScimUserMeta.constructFromObject(data['meta']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ScimUserName.constructFromObject(data['name']);
            }
            if (data.hasOwnProperty('operations')) {
                obj['operations'] = ApiClient.convertToType(data['operations'], [ScimUserOperations]);
            }
            if (data.hasOwnProperty('organization_id')) {
                obj['organization_id'] = ApiClient.convertToType(data['organization_id'], 'Number');
            }
            if (data.hasOwnProperty('schemas')) {
                obj['schemas'] = ApiClient.convertToType(data['schemas'], ['String']);
            }
            if (data.hasOwnProperty('userName')) {
                obj['userName'] = ApiClient.convertToType(data['userName'], 'String');
            }
        }
        return obj;
    }


}

/**
 * The active status of the User.
 * @member {Boolean} active
 */
ScimUser.prototype['active'] = undefined;

/**
 * The name of the user, suitable for display to end-users
 * @member {String} displayName
 */
ScimUser.prototype['displayName'] = undefined;

/**
 * user emails
 * @member {Array.<module:model/ScimUserEmails>} emails
 */
ScimUser.prototype['emails'] = undefined;

/**
 * The ID of the User.
 * @member {String} externalId
 */
ScimUser.prototype['externalId'] = undefined;

/**
 * associated groups
 * @member {Array.<Object>} groups
 */
ScimUser.prototype['groups'] = undefined;

/**
 * Unique identifier of an external identity
 * @member {String} id
 */
ScimUser.prototype['id'] = undefined;

/**
 * @member {module:model/ScimUserMeta} meta
 */
ScimUser.prototype['meta'] = undefined;

/**
 * @member {module:model/ScimUserName} name
 */
ScimUser.prototype['name'] = undefined;

/**
 * Set of operations to be performed
 * @member {Array.<module:model/ScimUserOperations>} operations
 */
ScimUser.prototype['operations'] = undefined;

/**
 * The ID of the organization.
 * @member {Number} organization_id
 */
ScimUser.prototype['organization_id'] = undefined;

/**
 * SCIM schema used.
 * @member {Array.<String>} schemas
 */
ScimUser.prototype['schemas'] = undefined;

/**
 * Configured by the admin. Could be an email, login, or username
 * @member {String} userName
 */
ScimUser.prototype['userName'] = undefined;






export default ScimUser;


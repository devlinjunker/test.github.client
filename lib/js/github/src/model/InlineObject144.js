/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 0.0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The InlineObject144 model module.
 * @module model/InlineObject144
 * @version 0.0.5
 */
class InlineObject144 {
    /**
     * Constructs a new <code>InlineObject144</code>.
     * @alias module:model/InlineObject144
     * @param name {String} The name of the repository.
     */
    constructor(name) { 
        
        InlineObject144.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['name'] = name;
    }

    /**
     * Constructs a <code>InlineObject144</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InlineObject144} obj Optional instance to populate.
     * @return {module:model/InlineObject144} The populated <code>InlineObject144</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InlineObject144();

            if (data.hasOwnProperty('allow_merge_commit')) {
                obj['allow_merge_commit'] = ApiClient.convertToType(data['allow_merge_commit'], 'Boolean');
            }
            if (data.hasOwnProperty('allow_rebase_merge')) {
                obj['allow_rebase_merge'] = ApiClient.convertToType(data['allow_rebase_merge'], 'Boolean');
            }
            if (data.hasOwnProperty('allow_squash_merge')) {
                obj['allow_squash_merge'] = ApiClient.convertToType(data['allow_squash_merge'], 'Boolean');
            }
            if (data.hasOwnProperty('auto_init')) {
                obj['auto_init'] = ApiClient.convertToType(data['auto_init'], 'Boolean');
            }
            if (data.hasOwnProperty('delete_branch_on_merge')) {
                obj['delete_branch_on_merge'] = ApiClient.convertToType(data['delete_branch_on_merge'], 'Boolean');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('gitignore_template')) {
                obj['gitignore_template'] = ApiClient.convertToType(data['gitignore_template'], 'String');
            }
            if (data.hasOwnProperty('has_downloads')) {
                obj['has_downloads'] = ApiClient.convertToType(data['has_downloads'], 'Boolean');
            }
            if (data.hasOwnProperty('has_issues')) {
                obj['has_issues'] = ApiClient.convertToType(data['has_issues'], 'Boolean');
            }
            if (data.hasOwnProperty('has_projects')) {
                obj['has_projects'] = ApiClient.convertToType(data['has_projects'], 'Boolean');
            }
            if (data.hasOwnProperty('has_wiki')) {
                obj['has_wiki'] = ApiClient.convertToType(data['has_wiki'], 'Boolean');
            }
            if (data.hasOwnProperty('homepage')) {
                obj['homepage'] = ApiClient.convertToType(data['homepage'], 'String');
            }
            if (data.hasOwnProperty('is_template')) {
                obj['is_template'] = ApiClient.convertToType(data['is_template'], 'Boolean');
            }
            if (data.hasOwnProperty('license_template')) {
                obj['license_template'] = ApiClient.convertToType(data['license_template'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('private')) {
                obj['private'] = ApiClient.convertToType(data['private'], 'Boolean');
            }
            if (data.hasOwnProperty('team_id')) {
                obj['team_id'] = ApiClient.convertToType(data['team_id'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * Whether to allow merge commits for pull requests.
 * @member {Boolean} allow_merge_commit
 * @default true
 */
InlineObject144.prototype['allow_merge_commit'] = true;

/**
 * Whether to allow rebase merges for pull requests.
 * @member {Boolean} allow_rebase_merge
 * @default true
 */
InlineObject144.prototype['allow_rebase_merge'] = true;

/**
 * Whether to allow squash merges for pull requests.
 * @member {Boolean} allow_squash_merge
 * @default true
 */
InlineObject144.prototype['allow_squash_merge'] = true;

/**
 * Whether the repository is initialized with a minimal README.
 * @member {Boolean} auto_init
 * @default false
 */
InlineObject144.prototype['auto_init'] = false;

/**
 * Whether to delete head branches when pull requests are merged
 * @member {Boolean} delete_branch_on_merge
 * @default false
 */
InlineObject144.prototype['delete_branch_on_merge'] = false;

/**
 * A short description of the repository.
 * @member {String} description
 */
InlineObject144.prototype['description'] = undefined;

/**
 * The desired language or platform to apply to the .gitignore.
 * @member {String} gitignore_template
 */
InlineObject144.prototype['gitignore_template'] = undefined;

/**
 * Whether downloads are enabled.
 * @member {Boolean} has_downloads
 * @default true
 */
InlineObject144.prototype['has_downloads'] = true;

/**
 * Whether issues are enabled.
 * @member {Boolean} has_issues
 * @default true
 */
InlineObject144.prototype['has_issues'] = true;

/**
 * Whether projects are enabled.
 * @member {Boolean} has_projects
 * @default true
 */
InlineObject144.prototype['has_projects'] = true;

/**
 * Whether the wiki is enabled.
 * @member {Boolean} has_wiki
 * @default true
 */
InlineObject144.prototype['has_wiki'] = true;

/**
 * A URL with more information about the repository.
 * @member {String} homepage
 */
InlineObject144.prototype['homepage'] = undefined;

/**
 * Whether this repository acts as a template that can be used to generate new repositories.
 * @member {Boolean} is_template
 * @default false
 */
InlineObject144.prototype['is_template'] = false;

/**
 * The license keyword of the open source license for this repository.
 * @member {String} license_template
 */
InlineObject144.prototype['license_template'] = undefined;

/**
 * The name of the repository.
 * @member {String} name
 */
InlineObject144.prototype['name'] = undefined;

/**
 * Whether the repository is private or public.
 * @member {Boolean} private
 * @default false
 */
InlineObject144.prototype['private'] = false;

/**
 * The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.
 * @member {Number} team_id
 */
InlineObject144.prototype['team_id'] = undefined;






export default InlineObject144;


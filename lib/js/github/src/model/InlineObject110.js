/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 0.0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ReposOwnerRepoPullsPullNumberReviewsComments from './ReposOwnerRepoPullsPullNumberReviewsComments';

/**
 * The InlineObject110 model module.
 * @module model/InlineObject110
 * @version 0.0.5
 */
class InlineObject110 {
    /**
     * Constructs a new <code>InlineObject110</code>.
     * @alias module:model/InlineObject110
     */
    constructor() { 
        
        InlineObject110.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InlineObject110</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InlineObject110} obj Optional instance to populate.
     * @return {module:model/InlineObject110} The populated <code>InlineObject110</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InlineObject110();

            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], 'String');
            }
            if (data.hasOwnProperty('comments')) {
                obj['comments'] = ApiClient.convertToType(data['comments'], [ReposOwnerRepoPullsPullNumberReviewsComments]);
            }
            if (data.hasOwnProperty('commit_id')) {
                obj['commit_id'] = ApiClient.convertToType(data['commit_id'], 'String');
            }
            if (data.hasOwnProperty('event')) {
                obj['event'] = ApiClient.convertToType(data['event'], 'String');
            }
        }
        return obj;
    }


}

/**
 * **Required** when using `REQUEST_CHANGES` or `COMMENT` for the `event` parameter. The body text of the pull request review.
 * @member {String} body
 */
InlineObject110.prototype['body'] = undefined;

/**
 * Use the following table to specify the location, destination, and contents of the draft review comment.
 * @member {Array.<module:model/ReposOwnerRepoPullsPullNumberReviewsComments>} comments
 */
InlineObject110.prototype['comments'] = undefined;

/**
 * The SHA of the commit that needs a review. Not using the latest commit SHA may render your review comment outdated if a subsequent commit modifies the line you specify as the `position`. Defaults to the most recent commit in the pull request when you do not specify a value.
 * @member {String} commit_id
 */
InlineObject110.prototype['commit_id'] = undefined;

/**
 * The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. By leaving this blank, you set the review action state to `PENDING`, which means you will need to [submit the pull request review](https://developer.github.com/v3/pulls/reviews/#submit-a-review-for-a-pull-request) when you are ready.
 * @member {module:model/InlineObject110.EventEnum} event
 */
InlineObject110.prototype['event'] = undefined;





/**
 * Allowed values for the <code>event</code> property.
 * @enum {String}
 * @readonly
 */
InlineObject110['EventEnum'] = {

    /**
     * value: "APPROVE"
     * @const
     */
    "APPROVE": "APPROVE",

    /**
     * value: "REQUEST_CHANGES"
     * @const
     */
    "REQUEST_CHANGES": "REQUEST_CHANGES",

    /**
     * value: "COMMENT"
     * @const
     */
    "COMMENT": "COMMENT"
};



export default InlineObject110;


/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 0.0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BranchShortCommit from './BranchShortCommit';
import CommitSearchResultItemParents from './CommitSearchResultItemParents';
import FileCommitCommitAuthor from './FileCommitCommitAuthor';
import FileCommitCommitVerification from './FileCommitCommitVerification';

/**
 * The FileCommitCommit model module.
 * @module model/FileCommitCommit
 * @version 0.0.5
 */
class FileCommitCommit {
    /**
     * Constructs a new <code>FileCommitCommit</code>.
     * @alias module:model/FileCommitCommit
     */
    constructor() { 
        
        FileCommitCommit.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FileCommitCommit</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FileCommitCommit} obj Optional instance to populate.
     * @return {module:model/FileCommitCommit} The populated <code>FileCommitCommit</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FileCommitCommit();

            if (data.hasOwnProperty('author')) {
                obj['author'] = FileCommitCommitAuthor.constructFromObject(data['author']);
            }
            if (data.hasOwnProperty('committer')) {
                obj['committer'] = FileCommitCommitAuthor.constructFromObject(data['committer']);
            }
            if (data.hasOwnProperty('html_url')) {
                obj['html_url'] = ApiClient.convertToType(data['html_url'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('node_id')) {
                obj['node_id'] = ApiClient.convertToType(data['node_id'], 'String');
            }
            if (data.hasOwnProperty('parents')) {
                obj['parents'] = ApiClient.convertToType(data['parents'], [CommitSearchResultItemParents]);
            }
            if (data.hasOwnProperty('sha')) {
                obj['sha'] = ApiClient.convertToType(data['sha'], 'String');
            }
            if (data.hasOwnProperty('tree')) {
                obj['tree'] = BranchShortCommit.constructFromObject(data['tree']);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('verification')) {
                obj['verification'] = FileCommitCommitVerification.constructFromObject(data['verification']);
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/FileCommitCommitAuthor} author
 */
FileCommitCommit.prototype['author'] = undefined;

/**
 * @member {module:model/FileCommitCommitAuthor} committer
 */
FileCommitCommit.prototype['committer'] = undefined;

/**
 * @member {String} html_url
 */
FileCommitCommit.prototype['html_url'] = undefined;

/**
 * @member {String} message
 */
FileCommitCommit.prototype['message'] = undefined;

/**
 * @member {String} node_id
 */
FileCommitCommit.prototype['node_id'] = undefined;

/**
 * @member {Array.<module:model/CommitSearchResultItemParents>} parents
 */
FileCommitCommit.prototype['parents'] = undefined;

/**
 * @member {String} sha
 */
FileCommitCommit.prototype['sha'] = undefined;

/**
 * @member {module:model/BranchShortCommit} tree
 */
FileCommitCommit.prototype['tree'] = undefined;

/**
 * @member {String} url
 */
FileCommitCommit.prototype['url'] = undefined;

/**
 * @member {module:model/FileCommitCommitVerification} verification
 */
FileCommitCommit.prototype['verification'] = undefined;






export default FileCommitCommit;


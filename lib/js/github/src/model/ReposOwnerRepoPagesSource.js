/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 0.0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ReposOwnerRepoPagesSource model module.
 * @module model/ReposOwnerRepoPagesSource
 * @version 0.0.5
 */
class ReposOwnerRepoPagesSource {
    /**
     * Constructs a new <code>ReposOwnerRepoPagesSource</code>.
     * @alias module:model/ReposOwnerRepoPagesSource
     */
    constructor() { 
        
        ReposOwnerRepoPagesSource.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReposOwnerRepoPagesSource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReposOwnerRepoPagesSource} obj Optional instance to populate.
     * @return {module:model/ReposOwnerRepoPagesSource} The populated <code>ReposOwnerRepoPagesSource</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReposOwnerRepoPagesSource();

            if (data.hasOwnProperty('branch')) {
                obj['branch'] = ApiClient.convertToType(data['branch'], 'String');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
        }
        return obj;
    }


}

/**
 * The repository branch used to publish your [site's source files](https://help.github.com/articles/configuring-a-publishing-source-for-github-pages/). Can be either `master` or `gh-pages`.
 * @member {module:model/ReposOwnerRepoPagesSource.BranchEnum} branch
 */
ReposOwnerRepoPagesSource.prototype['branch'] = undefined;

/**
 * The repository directory that includes the source files for the Pages site. When `branch` is `master`, you can change `path` to `/docs`. When `branch` is `gh-pages`, you are unable to specify a `path` other than `/`.
 * @member {String} path
 */
ReposOwnerRepoPagesSource.prototype['path'] = undefined;





/**
 * Allowed values for the <code>branch</code> property.
 * @enum {String}
 * @readonly
 */
ReposOwnerRepoPagesSource['BranchEnum'] = {

    /**
     * value: "master"
     * @const
     */
    "master": "master",

    /**
     * value: "gh-pages"
     * @const
     */
    "gh-pages": "gh-pages"
};



export default ReposOwnerRepoPagesSource;


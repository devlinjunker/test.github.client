/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 0.0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SimpleCommitAuthor from './SimpleCommitAuthor';

/**
 * The SimpleCommit model module.
 * @module model/SimpleCommit
 * @version 0.0.5
 */
class SimpleCommit {
    /**
     * Constructs a new <code>SimpleCommit</code>.
     * Simple Commit
     * @alias module:model/SimpleCommit
     * @param author {module:model/SimpleCommitAuthor} 
     * @param committer {module:model/SimpleCommitAuthor} 
     * @param id {String} 
     * @param message {String} 
     * @param timestamp {Date} 
     * @param treeId {String} 
     */
    constructor(author, committer, id, message, timestamp, treeId) { 
        
        SimpleCommit.initialize(this, author, committer, id, message, timestamp, treeId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, author, committer, id, message, timestamp, treeId) { 
        obj['author'] = author;
        obj['committer'] = committer;
        obj['id'] = id;
        obj['message'] = message;
        obj['timestamp'] = timestamp;
        obj['tree_id'] = treeId;
    }

    /**
     * Constructs a <code>SimpleCommit</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SimpleCommit} obj Optional instance to populate.
     * @return {module:model/SimpleCommit} The populated <code>SimpleCommit</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SimpleCommit();

            if (data.hasOwnProperty('author')) {
                obj['author'] = SimpleCommitAuthor.constructFromObject(data['author']);
            }
            if (data.hasOwnProperty('committer')) {
                obj['committer'] = SimpleCommitAuthor.constructFromObject(data['committer']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Date');
            }
            if (data.hasOwnProperty('tree_id')) {
                obj['tree_id'] = ApiClient.convertToType(data['tree_id'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/SimpleCommitAuthor} author
 */
SimpleCommit.prototype['author'] = undefined;

/**
 * @member {module:model/SimpleCommitAuthor} committer
 */
SimpleCommit.prototype['committer'] = undefined;

/**
 * @member {String} id
 */
SimpleCommit.prototype['id'] = undefined;

/**
 * @member {String} message
 */
SimpleCommit.prototype['message'] = undefined;

/**
 * @member {Date} timestamp
 */
SimpleCommit.prototype['timestamp'] = undefined;

/**
 * @member {String} tree_id
 */
SimpleCommit.prototype['tree_id'] = undefined;






export default SimpleCommit;


/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 0.0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IssueEventDismissedReview from './IssueEventDismissedReview';
import IssueEventLabel from './IssueEventLabel';
import IssueEventMilestone from './IssueEventMilestone';
import IssueEventProjectCard from './IssueEventProjectCard';
import IssueEventRename from './IssueEventRename';
import IssueSimple from './IssueSimple';
import SimpleUser from './SimpleUser';
import Team from './Team';

/**
 * The IssueEvent model module.
 * @module model/IssueEvent
 * @version 0.0.5
 */
class IssueEvent {
    /**
     * Constructs a new <code>IssueEvent</code>.
     * Issue Event
     * @alias module:model/IssueEvent
     * @param actor {module:model/SimpleUser} 
     * @param commitId {String} 
     * @param commitUrl {String} 
     * @param createdAt {Date} 
     * @param event {String} 
     * @param id {Number} 
     * @param nodeId {String} 
     * @param url {String} 
     */
    constructor(actor, commitId, commitUrl, createdAt, event, id, nodeId, url) { 
        
        IssueEvent.initialize(this, actor, commitId, commitUrl, createdAt, event, id, nodeId, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, actor, commitId, commitUrl, createdAt, event, id, nodeId, url) { 
        obj['actor'] = actor;
        obj['commit_id'] = commitId;
        obj['commit_url'] = commitUrl;
        obj['created_at'] = createdAt;
        obj['event'] = event;
        obj['id'] = id;
        obj['node_id'] = nodeId;
        obj['url'] = url;
    }

    /**
     * Constructs a <code>IssueEvent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IssueEvent} obj Optional instance to populate.
     * @return {module:model/IssueEvent} The populated <code>IssueEvent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IssueEvent();

            if (data.hasOwnProperty('actor')) {
                obj['actor'] = ApiClient.convertToType(data['actor'], SimpleUser);
            }
            if (data.hasOwnProperty('assignee')) {
                obj['assignee'] = ApiClient.convertToType(data['assignee'], SimpleUser);
            }
            if (data.hasOwnProperty('assigner')) {
                obj['assigner'] = ApiClient.convertToType(data['assigner'], SimpleUser);
            }
            if (data.hasOwnProperty('author_association')) {
                obj['author_association'] = ApiClient.convertToType(data['author_association'], 'String');
            }
            if (data.hasOwnProperty('commit_id')) {
                obj['commit_id'] = ApiClient.convertToType(data['commit_id'], 'String');
            }
            if (data.hasOwnProperty('commit_url')) {
                obj['commit_url'] = ApiClient.convertToType(data['commit_url'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('dismissed_review')) {
                obj['dismissed_review'] = IssueEventDismissedReview.constructFromObject(data['dismissed_review']);
            }
            if (data.hasOwnProperty('event')) {
                obj['event'] = ApiClient.convertToType(data['event'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('issue')) {
                obj['issue'] = IssueSimple.constructFromObject(data['issue']);
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = IssueEventLabel.constructFromObject(data['label']);
            }
            if (data.hasOwnProperty('lock_reason')) {
                obj['lock_reason'] = ApiClient.convertToType(data['lock_reason'], 'String');
            }
            if (data.hasOwnProperty('milestone')) {
                obj['milestone'] = IssueEventMilestone.constructFromObject(data['milestone']);
            }
            if (data.hasOwnProperty('node_id')) {
                obj['node_id'] = ApiClient.convertToType(data['node_id'], 'String');
            }
            if (data.hasOwnProperty('project_card')) {
                obj['project_card'] = IssueEventProjectCard.constructFromObject(data['project_card']);
            }
            if (data.hasOwnProperty('rename')) {
                obj['rename'] = IssueEventRename.constructFromObject(data['rename']);
            }
            if (data.hasOwnProperty('requested_reviewer')) {
                obj['requested_reviewer'] = ApiClient.convertToType(data['requested_reviewer'], SimpleUser);
            }
            if (data.hasOwnProperty('requested_team')) {
                obj['requested_team'] = Team.constructFromObject(data['requested_team']);
            }
            if (data.hasOwnProperty('review_requester')) {
                obj['review_requester'] = ApiClient.convertToType(data['review_requester'], SimpleUser);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/SimpleUser} actor
 */
IssueEvent.prototype['actor'] = undefined;

/**
 * @member {module:model/SimpleUser} assignee
 */
IssueEvent.prototype['assignee'] = undefined;

/**
 * @member {module:model/SimpleUser} assigner
 */
IssueEvent.prototype['assigner'] = undefined;

/**
 * @member {String} author_association
 */
IssueEvent.prototype['author_association'] = undefined;

/**
 * @member {String} commit_id
 */
IssueEvent.prototype['commit_id'] = undefined;

/**
 * @member {String} commit_url
 */
IssueEvent.prototype['commit_url'] = undefined;

/**
 * @member {Date} created_at
 */
IssueEvent.prototype['created_at'] = undefined;

/**
 * @member {module:model/IssueEventDismissedReview} dismissed_review
 */
IssueEvent.prototype['dismissed_review'] = undefined;

/**
 * @member {String} event
 */
IssueEvent.prototype['event'] = undefined;

/**
 * @member {Number} id
 */
IssueEvent.prototype['id'] = undefined;

/**
 * @member {module:model/IssueSimple} issue
 */
IssueEvent.prototype['issue'] = undefined;

/**
 * @member {module:model/IssueEventLabel} label
 */
IssueEvent.prototype['label'] = undefined;

/**
 * @member {String} lock_reason
 */
IssueEvent.prototype['lock_reason'] = undefined;

/**
 * @member {module:model/IssueEventMilestone} milestone
 */
IssueEvent.prototype['milestone'] = undefined;

/**
 * @member {String} node_id
 */
IssueEvent.prototype['node_id'] = undefined;

/**
 * @member {module:model/IssueEventProjectCard} project_card
 */
IssueEvent.prototype['project_card'] = undefined;

/**
 * @member {module:model/IssueEventRename} rename
 */
IssueEvent.prototype['rename'] = undefined;

/**
 * @member {module:model/SimpleUser} requested_reviewer
 */
IssueEvent.prototype['requested_reviewer'] = undefined;

/**
 * @member {module:model/Team} requested_team
 */
IssueEvent.prototype['requested_team'] = undefined;

/**
 * @member {module:model/SimpleUser} review_requester
 */
IssueEvent.prototype['review_requester'] = undefined;

/**
 * @member {String} url
 */
IssueEvent.prototype['url'] = undefined;






export default IssueEvent;


/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 0.0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ReposOwnerRepoGitTreesTree from './ReposOwnerRepoGitTreesTree';

/**
 * The InlineObject71 model module.
 * @module model/InlineObject71
 * @version 0.0.5
 */
class InlineObject71 {
    /**
     * Constructs a new <code>InlineObject71</code>.
     * @alias module:model/InlineObject71
     * @param tree {Array.<module:model/ReposOwnerRepoGitTreesTree>} Objects (of `path`, `mode`, `type`, and `sha`) specifying a tree structure.
     */
    constructor(tree) { 
        
        InlineObject71.initialize(this, tree);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, tree) { 
        obj['tree'] = tree;
    }

    /**
     * Constructs a <code>InlineObject71</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InlineObject71} obj Optional instance to populate.
     * @return {module:model/InlineObject71} The populated <code>InlineObject71</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InlineObject71();

            if (data.hasOwnProperty('base_tree')) {
                obj['base_tree'] = ApiClient.convertToType(data['base_tree'], 'String');
            }
            if (data.hasOwnProperty('tree')) {
                obj['tree'] = ApiClient.convertToType(data['tree'], [ReposOwnerRepoGitTreesTree]);
            }
        }
        return obj;
    }


}

/**
 * The SHA1 of the tree you want to update with new data. If you don't set this, the commit will be created on top of everything; however, it will only contain your change, the rest of your files will show up as deleted.
 * @member {String} base_tree
 */
InlineObject71.prototype['base_tree'] = undefined;

/**
 * Objects (of `path`, `mode`, `type`, and `sha`) specifying a tree structure.
 * @member {Array.<module:model/ReposOwnerRepoGitTreesTree>} tree
 */
InlineObject71.prototype['tree'] = undefined;






export default InlineObject71;


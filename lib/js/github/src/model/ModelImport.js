/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 0.0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ImportProjectChoices from './ImportProjectChoices';

/**
 * The ModelImport model module.
 * @module model/ModelImport
 * @version 0.0.5
 */
class ModelImport {
    /**
     * Constructs a new <code>ModelImport</code>.
     * A repository import from an external source.
     * @alias module:model/ModelImport
     * @param authorsUrl {String} 
     * @param htmlUrl {String} 
     * @param repositoryUrl {String} 
     * @param status {module:model/ModelImport.StatusEnum} 
     * @param url {String} 
     * @param vcs {String} 
     * @param vcsUrl {String} The URL of the originating repository.
     */
    constructor(authorsUrl, htmlUrl, repositoryUrl, status, url, vcs, vcsUrl) { 
        
        ModelImport.initialize(this, authorsUrl, htmlUrl, repositoryUrl, status, url, vcs, vcsUrl);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, authorsUrl, htmlUrl, repositoryUrl, status, url, vcs, vcsUrl) { 
        obj['authors_url'] = authorsUrl;
        obj['html_url'] = htmlUrl;
        obj['repository_url'] = repositoryUrl;
        obj['status'] = status;
        obj['url'] = url;
        obj['vcs'] = vcs;
        obj['vcs_url'] = vcsUrl;
    }

    /**
     * Constructs a <code>ModelImport</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ModelImport} obj Optional instance to populate.
     * @return {module:model/ModelImport} The populated <code>ModelImport</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ModelImport();

            if (data.hasOwnProperty('authors_count')) {
                obj['authors_count'] = ApiClient.convertToType(data['authors_count'], 'Number');
            }
            if (data.hasOwnProperty('authors_url')) {
                obj['authors_url'] = ApiClient.convertToType(data['authors_url'], 'String');
            }
            if (data.hasOwnProperty('commit_count')) {
                obj['commit_count'] = ApiClient.convertToType(data['commit_count'], 'Number');
            }
            if (data.hasOwnProperty('error_message')) {
                obj['error_message'] = ApiClient.convertToType(data['error_message'], 'String');
            }
            if (data.hasOwnProperty('failed_step')) {
                obj['failed_step'] = ApiClient.convertToType(data['failed_step'], 'String');
            }
            if (data.hasOwnProperty('has_large_files')) {
                obj['has_large_files'] = ApiClient.convertToType(data['has_large_files'], 'Boolean');
            }
            if (data.hasOwnProperty('html_url')) {
                obj['html_url'] = ApiClient.convertToType(data['html_url'], 'String');
            }
            if (data.hasOwnProperty('import_percent')) {
                obj['import_percent'] = ApiClient.convertToType(data['import_percent'], 'Number');
            }
            if (data.hasOwnProperty('large_files_count')) {
                obj['large_files_count'] = ApiClient.convertToType(data['large_files_count'], 'Number');
            }
            if (data.hasOwnProperty('large_files_size')) {
                obj['large_files_size'] = ApiClient.convertToType(data['large_files_size'], 'Number');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('project_choices')) {
                obj['project_choices'] = ApiClient.convertToType(data['project_choices'], [ImportProjectChoices]);
            }
            if (data.hasOwnProperty('push_percent')) {
                obj['push_percent'] = ApiClient.convertToType(data['push_percent'], 'Number');
            }
            if (data.hasOwnProperty('repository_url')) {
                obj['repository_url'] = ApiClient.convertToType(data['repository_url'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('status_text')) {
                obj['status_text'] = ApiClient.convertToType(data['status_text'], 'String');
            }
            if (data.hasOwnProperty('svc_root')) {
                obj['svc_root'] = ApiClient.convertToType(data['svc_root'], 'String');
            }
            if (data.hasOwnProperty('svn_root')) {
                obj['svn_root'] = ApiClient.convertToType(data['svn_root'], 'String');
            }
            if (data.hasOwnProperty('tfvc_project')) {
                obj['tfvc_project'] = ApiClient.convertToType(data['tfvc_project'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('use_lfs')) {
                obj['use_lfs'] = ApiClient.convertToType(data['use_lfs'], 'String');
            }
            if (data.hasOwnProperty('vcs')) {
                obj['vcs'] = ApiClient.convertToType(data['vcs'], 'String');
            }
            if (data.hasOwnProperty('vcs_url')) {
                obj['vcs_url'] = ApiClient.convertToType(data['vcs_url'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {Number} authors_count
 */
ModelImport.prototype['authors_count'] = undefined;

/**
 * @member {String} authors_url
 */
ModelImport.prototype['authors_url'] = undefined;

/**
 * @member {Number} commit_count
 */
ModelImport.prototype['commit_count'] = undefined;

/**
 * @member {String} error_message
 */
ModelImport.prototype['error_message'] = undefined;

/**
 * @member {String} failed_step
 */
ModelImport.prototype['failed_step'] = undefined;

/**
 * @member {Boolean} has_large_files
 */
ModelImport.prototype['has_large_files'] = undefined;

/**
 * @member {String} html_url
 */
ModelImport.prototype['html_url'] = undefined;

/**
 * @member {Number} import_percent
 */
ModelImport.prototype['import_percent'] = undefined;

/**
 * @member {Number} large_files_count
 */
ModelImport.prototype['large_files_count'] = undefined;

/**
 * @member {Number} large_files_size
 */
ModelImport.prototype['large_files_size'] = undefined;

/**
 * @member {String} message
 */
ModelImport.prototype['message'] = undefined;

/**
 * @member {Array.<module:model/ImportProjectChoices>} project_choices
 */
ModelImport.prototype['project_choices'] = undefined;

/**
 * @member {Number} push_percent
 */
ModelImport.prototype['push_percent'] = undefined;

/**
 * @member {String} repository_url
 */
ModelImport.prototype['repository_url'] = undefined;

/**
 * @member {module:model/ModelImport.StatusEnum} status
 */
ModelImport.prototype['status'] = undefined;

/**
 * @member {String} status_text
 */
ModelImport.prototype['status_text'] = undefined;

/**
 * @member {String} svc_root
 */
ModelImport.prototype['svc_root'] = undefined;

/**
 * @member {String} svn_root
 */
ModelImport.prototype['svn_root'] = undefined;

/**
 * @member {String} tfvc_project
 */
ModelImport.prototype['tfvc_project'] = undefined;

/**
 * @member {String} url
 */
ModelImport.prototype['url'] = undefined;

/**
 * @member {String} use_lfs
 */
ModelImport.prototype['use_lfs'] = undefined;

/**
 * @member {String} vcs
 */
ModelImport.prototype['vcs'] = undefined;

/**
 * The URL of the originating repository.
 * @member {String} vcs_url
 */
ModelImport.prototype['vcs_url'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
ModelImport['StatusEnum'] = {

    /**
     * value: "auth"
     * @const
     */
    "auth": "auth",

    /**
     * value: "error"
     * @const
     */
    "error": "error",

    /**
     * value: "none"
     * @const
     */
    "none": "none",

    /**
     * value: "detecting"
     * @const
     */
    "detecting": "detecting",

    /**
     * value: "choose"
     * @const
     */
    "choose": "choose",

    /**
     * value: "auth_failed"
     * @const
     */
    "auth_failed": "auth_failed",

    /**
     * value: "importing"
     * @const
     */
    "importing": "importing",

    /**
     * value: "mapping"
     * @const
     */
    "mapping": "mapping",

    /**
     * value: "waiting_to_push"
     * @const
     */
    "waiting_to_push": "waiting_to_push",

    /**
     * value: "pushing"
     * @const
     */
    "pushing": "pushing",

    /**
     * value: "complete"
     * @const
     */
    "complete": "complete",

    /**
     * value: "setup"
     * @const
     */
    "setup": "setup",

    /**
     * value: "unknown"
     * @const
     */
    "unknown": "unknown",

    /**
     * value: "detection_found_multiple"
     * @const
     */
    "detection_found_multiple": "detection_found_multiple",

    /**
     * value: "detection_found_nothing"
     * @const
     */
    "detection_found_nothing": "detection_found_nothing",

    /**
     * value: "detection_needs_auth"
     * @const
     */
    "detection_needs_auth": "detection_needs_auth"
};



export default ModelImport;


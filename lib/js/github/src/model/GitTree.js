/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 0.0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GitTreeTree from './GitTreeTree';

/**
 * The GitTree model module.
 * @module model/GitTree
 * @version 0.0.5
 */
class GitTree {
    /**
     * Constructs a new <code>GitTree</code>.
     * The hierarchy between files in a Git repository.
     * @alias module:model/GitTree
     * @param sha {String} 
     * @param tree {Array.<module:model/GitTreeTree>} Objects specifying a tree structure
     * @param truncated {Boolean} 
     * @param url {String} 
     */
    constructor(sha, tree, truncated, url) { 
        
        GitTree.initialize(this, sha, tree, truncated, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, sha, tree, truncated, url) { 
        obj['sha'] = sha;
        obj['tree'] = tree;
        obj['truncated'] = truncated;
        obj['url'] = url;
    }

    /**
     * Constructs a <code>GitTree</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GitTree} obj Optional instance to populate.
     * @return {module:model/GitTree} The populated <code>GitTree</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GitTree();

            if (data.hasOwnProperty('sha')) {
                obj['sha'] = ApiClient.convertToType(data['sha'], 'String');
            }
            if (data.hasOwnProperty('tree')) {
                obj['tree'] = ApiClient.convertToType(data['tree'], [GitTreeTree]);
            }
            if (data.hasOwnProperty('truncated')) {
                obj['truncated'] = ApiClient.convertToType(data['truncated'], 'Boolean');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {String} sha
 */
GitTree.prototype['sha'] = undefined;

/**
 * Objects specifying a tree structure
 * @member {Array.<module:model/GitTreeTree>} tree
 */
GitTree.prototype['tree'] = undefined;

/**
 * @member {Boolean} truncated
 */
GitTree.prototype['truncated'] = undefined;

/**
 * @member {String} url
 */
GitTree.prototype['url'] = undefined;






export default GitTree;


/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 0.0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CommitSearchResultItemCommit from './CommitSearchResultItemCommit';
import CommitSearchResultItemParents from './CommitSearchResultItemParents';
import GitUser from './GitUser';
import MinimalRepository from './MinimalRepository';
import SimpleUser from './SimpleUser';

/**
 * The CommitSearchResultItem model module.
 * @module model/CommitSearchResultItem
 * @version 0.0.5
 */
class CommitSearchResultItem {
    /**
     * Constructs a new <code>CommitSearchResultItem</code>.
     * Commit Search Result Item
     * @alias module:model/CommitSearchResultItem
     * @param author {module:model/SimpleUser} 
     * @param commentsUrl {String} 
     * @param commit {module:model/CommitSearchResultItemCommit} 
     * @param committer {module:model/GitUser} 
     * @param htmlUrl {String} 
     * @param nodeId {String} 
     * @param parents {Array.<module:model/CommitSearchResultItemParents>} 
     * @param repository {module:model/MinimalRepository} 
     * @param score {Number} 
     * @param sha {String} 
     * @param url {String} 
     */
    constructor(author, commentsUrl, commit, committer, htmlUrl, nodeId, parents, repository, score, sha, url) { 
        
        CommitSearchResultItem.initialize(this, author, commentsUrl, commit, committer, htmlUrl, nodeId, parents, repository, score, sha, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, author, commentsUrl, commit, committer, htmlUrl, nodeId, parents, repository, score, sha, url) { 
        obj['author'] = author;
        obj['comments_url'] = commentsUrl;
        obj['commit'] = commit;
        obj['committer'] = committer;
        obj['html_url'] = htmlUrl;
        obj['node_id'] = nodeId;
        obj['parents'] = parents;
        obj['repository'] = repository;
        obj['score'] = score;
        obj['sha'] = sha;
        obj['url'] = url;
    }

    /**
     * Constructs a <code>CommitSearchResultItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CommitSearchResultItem} obj Optional instance to populate.
     * @return {module:model/CommitSearchResultItem} The populated <code>CommitSearchResultItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CommitSearchResultItem();

            if (data.hasOwnProperty('author')) {
                obj['author'] = ApiClient.convertToType(data['author'], SimpleUser);
            }
            if (data.hasOwnProperty('comments_url')) {
                obj['comments_url'] = ApiClient.convertToType(data['comments_url'], 'String');
            }
            if (data.hasOwnProperty('commit')) {
                obj['commit'] = CommitSearchResultItemCommit.constructFromObject(data['commit']);
            }
            if (data.hasOwnProperty('committer')) {
                obj['committer'] = ApiClient.convertToType(data['committer'], GitUser);
            }
            if (data.hasOwnProperty('html_url')) {
                obj['html_url'] = ApiClient.convertToType(data['html_url'], 'String');
            }
            if (data.hasOwnProperty('node_id')) {
                obj['node_id'] = ApiClient.convertToType(data['node_id'], 'String');
            }
            if (data.hasOwnProperty('parents')) {
                obj['parents'] = ApiClient.convertToType(data['parents'], [CommitSearchResultItemParents]);
            }
            if (data.hasOwnProperty('repository')) {
                obj['repository'] = MinimalRepository.constructFromObject(data['repository']);
            }
            if (data.hasOwnProperty('score')) {
                obj['score'] = ApiClient.convertToType(data['score'], 'Number');
            }
            if (data.hasOwnProperty('sha')) {
                obj['sha'] = ApiClient.convertToType(data['sha'], 'String');
            }
            if (data.hasOwnProperty('text_matches')) {
                obj['text_matches'] = ApiClient.convertToType(data['text_matches'], [Object]);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/SimpleUser} author
 */
CommitSearchResultItem.prototype['author'] = undefined;

/**
 * @member {String} comments_url
 */
CommitSearchResultItem.prototype['comments_url'] = undefined;

/**
 * @member {module:model/CommitSearchResultItemCommit} commit
 */
CommitSearchResultItem.prototype['commit'] = undefined;

/**
 * @member {module:model/GitUser} committer
 */
CommitSearchResultItem.prototype['committer'] = undefined;

/**
 * @member {String} html_url
 */
CommitSearchResultItem.prototype['html_url'] = undefined;

/**
 * @member {String} node_id
 */
CommitSearchResultItem.prototype['node_id'] = undefined;

/**
 * @member {Array.<module:model/CommitSearchResultItemParents>} parents
 */
CommitSearchResultItem.prototype['parents'] = undefined;

/**
 * @member {module:model/MinimalRepository} repository
 */
CommitSearchResultItem.prototype['repository'] = undefined;

/**
 * @member {Number} score
 */
CommitSearchResultItem.prototype['score'] = undefined;

/**
 * @member {String} sha
 */
CommitSearchResultItem.prototype['sha'] = undefined;

/**
 * @member {Array.<Object>} text_matches
 */
CommitSearchResultItem.prototype['text_matches'] = undefined;

/**
 * @member {String} url
 */
CommitSearchResultItem.prototype['url'] = undefined;






export default CommitSearchResultItem;


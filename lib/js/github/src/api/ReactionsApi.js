/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 0.0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BasicError from '../model/BasicError';
import InlineObject103 from '../model/InlineObject103';
import InlineObject131 from '../model/InlineObject131';
import InlineObject132 from '../model/InlineObject132';
import InlineObject33 from '../model/InlineObject33';
import InlineObject34 from '../model/InlineObject34';
import InlineObject58 from '../model/InlineObject58';
import InlineObject82 from '../model/InlineObject82';
import InlineObject90 from '../model/InlineObject90';
import InlineResponse415 from '../model/InlineResponse415';
import Reaction from '../model/Reaction';
import ValidationError from '../model/ValidationError';

/**
* Reactions service.
* @module api/ReactionsApi
* @version 0.0.5
*/
export default class ReactionsApi {

    /**
    * Constructs a new ReactionsApi. 
    * @alias module:api/ReactionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the reactionsCreateForCommitComment operation.
     * @callback module:api/ReactionsApi~reactionsCreateForCommitCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Reaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create reaction for a commit comment
     * Create a reaction to a [commit comment](https://developer.github.com/v3/repos/comments/). A response with a `Status: 200 OK` means that you already added the reaction type to this commit comment.
     * @param {String} owner 
     * @param {String} repo 
     * @param {Number} commentId comment_id parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject58} opts.inlineObject58 
     * @param {module:api/ReactionsApi~reactionsCreateForCommitCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Reaction}
     */
    reactionsCreateForCommitComment(owner, repo, commentId, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject58'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling reactionsCreateForCommitComment");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling reactionsCreateForCommitComment");
      }
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling reactionsCreateForCommitComment");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'comment_id': commentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Reaction;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/comments/{comment_id}/reactions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactionsCreateForIssue operation.
     * @callback module:api/ReactionsApi~reactionsCreateForIssueCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Reaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create reaction for an issue
     * Create a reaction to an [issue](https://developer.github.com/v3/issues/). A response with a `Status: 200 OK` means that you already added the reaction type to this issue.
     * @param {String} owner 
     * @param {String} repo 
     * @param {Number} issueNumber issue_number parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject90} opts.inlineObject90 
     * @param {module:api/ReactionsApi~reactionsCreateForIssueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Reaction}
     */
    reactionsCreateForIssue(owner, repo, issueNumber, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject90'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling reactionsCreateForIssue");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling reactionsCreateForIssue");
      }
      // verify the required parameter 'issueNumber' is set
      if (issueNumber === undefined || issueNumber === null) {
        throw new Error("Missing the required parameter 'issueNumber' when calling reactionsCreateForIssue");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'issue_number': issueNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Reaction;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{issue_number}/reactions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactionsCreateForIssueComment operation.
     * @callback module:api/ReactionsApi~reactionsCreateForIssueCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Reaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create reaction for an issue comment
     * Create a reaction to an [issue comment](https://developer.github.com/v3/issues/comments/). A response with a `Status: 200 OK` means that you already added the reaction type to this issue comment.
     * @param {String} owner 
     * @param {String} repo 
     * @param {Number} commentId comment_id parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject82} opts.inlineObject82 
     * @param {module:api/ReactionsApi~reactionsCreateForIssueCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Reaction}
     */
    reactionsCreateForIssueComment(owner, repo, commentId, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject82'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling reactionsCreateForIssueComment");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling reactionsCreateForIssueComment");
      }
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling reactionsCreateForIssueComment");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'comment_id': commentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Reaction;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactionsCreateForPullRequestReviewComment operation.
     * @callback module:api/ReactionsApi~reactionsCreateForPullRequestReviewCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Reaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create reaction for a pull request review comment
     * Create a reaction to a [pull request review comment](https://developer.github.com/v3/pulls/comments/). A response with a `Status: 200 OK` means that you already added the reaction type to this pull request review comment.
     * @param {String} owner 
     * @param {String} repo 
     * @param {Number} commentId comment_id parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject103} opts.inlineObject103 
     * @param {module:api/ReactionsApi~reactionsCreateForPullRequestReviewCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Reaction}
     */
    reactionsCreateForPullRequestReviewComment(owner, repo, commentId, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject103'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling reactionsCreateForPullRequestReviewComment");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling reactionsCreateForPullRequestReviewComment");
      }
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling reactionsCreateForPullRequestReviewComment");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'comment_id': commentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Reaction;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactionsCreateForTeamDiscussionCommentInOrg operation.
     * @callback module:api/ReactionsApi~reactionsCreateForTeamDiscussionCommentInOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Reaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create reaction for a team discussion comment
     * Create a reaction to a [team discussion comment](https://developer.github.com/v3/teams/discussion_comments/). OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a `Status: 200 OK` means that you already added the reaction type to this team discussion comment.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
     * @param {String} org 
     * @param {String} teamSlug team_slug parameter
     * @param {Number} discussionNumber 
     * @param {Number} commentNumber 
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject33} opts.inlineObject33 
     * @param {module:api/ReactionsApi~reactionsCreateForTeamDiscussionCommentInOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Reaction}
     */
    reactionsCreateForTeamDiscussionCommentInOrg(org, teamSlug, discussionNumber, commentNumber, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject33'];
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling reactionsCreateForTeamDiscussionCommentInOrg");
      }
      // verify the required parameter 'teamSlug' is set
      if (teamSlug === undefined || teamSlug === null) {
        throw new Error("Missing the required parameter 'teamSlug' when calling reactionsCreateForTeamDiscussionCommentInOrg");
      }
      // verify the required parameter 'discussionNumber' is set
      if (discussionNumber === undefined || discussionNumber === null) {
        throw new Error("Missing the required parameter 'discussionNumber' when calling reactionsCreateForTeamDiscussionCommentInOrg");
      }
      // verify the required parameter 'commentNumber' is set
      if (commentNumber === undefined || commentNumber === null) {
        throw new Error("Missing the required parameter 'commentNumber' when calling reactionsCreateForTeamDiscussionCommentInOrg");
      }

      let pathParams = {
        'org': org,
        'team_slug': teamSlug,
        'discussion_number': discussionNumber,
        'comment_number': commentNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Reaction;
      return this.apiClient.callApi(
        '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactionsCreateForTeamDiscussionCommentLegacy operation.
     * @callback module:api/ReactionsApi~reactionsCreateForTeamDiscussionCommentLegacyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Reaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create reaction for a team discussion comment (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create reaction for a team discussion comment`](https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion-comment) endpoint.  Create a reaction to a [team discussion comment](https://developer.github.com/v3/teams/discussion_comments/). OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a `Status: 200 OK` means that you already added the reaction type to this team discussion comment.
     * @param {Number} teamId 
     * @param {Number} discussionNumber 
     * @param {Number} commentNumber 
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject131} opts.inlineObject131 
     * @param {module:api/ReactionsApi~reactionsCreateForTeamDiscussionCommentLegacyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Reaction}
     */
    reactionsCreateForTeamDiscussionCommentLegacy(teamId, discussionNumber, commentNumber, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject131'];
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling reactionsCreateForTeamDiscussionCommentLegacy");
      }
      // verify the required parameter 'discussionNumber' is set
      if (discussionNumber === undefined || discussionNumber === null) {
        throw new Error("Missing the required parameter 'discussionNumber' when calling reactionsCreateForTeamDiscussionCommentLegacy");
      }
      // verify the required parameter 'commentNumber' is set
      if (commentNumber === undefined || commentNumber === null) {
        throw new Error("Missing the required parameter 'commentNumber' when calling reactionsCreateForTeamDiscussionCommentLegacy");
      }

      let pathParams = {
        'team_id': teamId,
        'discussion_number': discussionNumber,
        'comment_number': commentNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Reaction;
      return this.apiClient.callApi(
        '/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactionsCreateForTeamDiscussionInOrg operation.
     * @callback module:api/ReactionsApi~reactionsCreateForTeamDiscussionInOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Reaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create reaction for a team discussion
     * Create a reaction to a [team discussion](https://developer.github.com/v3/teams/discussions/). OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a `Status: 200 OK` means that you already added the reaction type to this team discussion.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
     * @param {String} org 
     * @param {String} teamSlug team_slug parameter
     * @param {Number} discussionNumber 
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject34} opts.inlineObject34 
     * @param {module:api/ReactionsApi~reactionsCreateForTeamDiscussionInOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Reaction}
     */
    reactionsCreateForTeamDiscussionInOrg(org, teamSlug, discussionNumber, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject34'];
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling reactionsCreateForTeamDiscussionInOrg");
      }
      // verify the required parameter 'teamSlug' is set
      if (teamSlug === undefined || teamSlug === null) {
        throw new Error("Missing the required parameter 'teamSlug' when calling reactionsCreateForTeamDiscussionInOrg");
      }
      // verify the required parameter 'discussionNumber' is set
      if (discussionNumber === undefined || discussionNumber === null) {
        throw new Error("Missing the required parameter 'discussionNumber' when calling reactionsCreateForTeamDiscussionInOrg");
      }

      let pathParams = {
        'org': org,
        'team_slug': teamSlug,
        'discussion_number': discussionNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Reaction;
      return this.apiClient.callApi(
        '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactionsCreateForTeamDiscussionLegacy operation.
     * @callback module:api/ReactionsApi~reactionsCreateForTeamDiscussionLegacyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Reaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create reaction for a team discussion (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create reaction for a team discussion`](https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion) endpoint.  Create a reaction to a [team discussion](https://developer.github.com/v3/teams/discussions/). OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a `Status: 200 OK` means that you already added the reaction type to this team discussion.
     * @param {Number} teamId 
     * @param {Number} discussionNumber 
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject132} opts.inlineObject132 
     * @param {module:api/ReactionsApi~reactionsCreateForTeamDiscussionLegacyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Reaction}
     */
    reactionsCreateForTeamDiscussionLegacy(teamId, discussionNumber, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject132'];
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling reactionsCreateForTeamDiscussionLegacy");
      }
      // verify the required parameter 'discussionNumber' is set
      if (discussionNumber === undefined || discussionNumber === null) {
        throw new Error("Missing the required parameter 'discussionNumber' when calling reactionsCreateForTeamDiscussionLegacy");
      }

      let pathParams = {
        'team_id': teamId,
        'discussion_number': discussionNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Reaction;
      return this.apiClient.callApi(
        '/teams/{team_id}/discussions/{discussion_number}/reactions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactionsDeleteForCommitComment operation.
     * @callback module:api/ReactionsApi~reactionsDeleteForCommitCommentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a commit comment reaction
     * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/comments/:comment_id/reactions/:reaction_id`.  Delete a reaction to a [commit comment](https://developer.github.com/v3/repos/comments/).
     * @param {String} owner 
     * @param {String} repo 
     * @param {Number} commentId comment_id parameter
     * @param {Number} reactionId 
     * @param {module:api/ReactionsApi~reactionsDeleteForCommitCommentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reactionsDeleteForCommitComment(owner, repo, commentId, reactionId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling reactionsDeleteForCommitComment");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling reactionsDeleteForCommitComment");
      }
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling reactionsDeleteForCommitComment");
      }
      // verify the required parameter 'reactionId' is set
      if (reactionId === undefined || reactionId === null) {
        throw new Error("Missing the required parameter 'reactionId' when calling reactionsDeleteForCommitComment");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'comment_id': commentId,
        'reaction_id': reactionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactionsDeleteForIssue operation.
     * @callback module:api/ReactionsApi~reactionsDeleteForIssueCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an issue reaction
     * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/issues/:issue_number/reactions/:reaction_id`.  Delete a reaction to an [issue](https://developer.github.com/v3/issues/).
     * @param {String} owner 
     * @param {String} repo 
     * @param {Number} issueNumber issue_number parameter
     * @param {Number} reactionId 
     * @param {module:api/ReactionsApi~reactionsDeleteForIssueCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reactionsDeleteForIssue(owner, repo, issueNumber, reactionId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling reactionsDeleteForIssue");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling reactionsDeleteForIssue");
      }
      // verify the required parameter 'issueNumber' is set
      if (issueNumber === undefined || issueNumber === null) {
        throw new Error("Missing the required parameter 'issueNumber' when calling reactionsDeleteForIssue");
      }
      // verify the required parameter 'reactionId' is set
      if (reactionId === undefined || reactionId === null) {
        throw new Error("Missing the required parameter 'reactionId' when calling reactionsDeleteForIssue");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'issue_number': issueNumber,
        'reaction_id': reactionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactionsDeleteForIssueComment operation.
     * @callback module:api/ReactionsApi~reactionsDeleteForIssueCommentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an issue comment reaction
     * **Note:** You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/issues/comments/:comment_id/reactions/:reaction_id`.  Delete a reaction to an [issue comment](https://developer.github.com/v3/issues/comments/).
     * @param {String} owner 
     * @param {String} repo 
     * @param {Number} commentId comment_id parameter
     * @param {Number} reactionId 
     * @param {module:api/ReactionsApi~reactionsDeleteForIssueCommentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reactionsDeleteForIssueComment(owner, repo, commentId, reactionId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling reactionsDeleteForIssueComment");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling reactionsDeleteForIssueComment");
      }
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling reactionsDeleteForIssueComment");
      }
      // verify the required parameter 'reactionId' is set
      if (reactionId === undefined || reactionId === null) {
        throw new Error("Missing the required parameter 'reactionId' when calling reactionsDeleteForIssueComment");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'comment_id': commentId,
        'reaction_id': reactionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactionsDeleteForPullRequestComment operation.
     * @callback module:api/ReactionsApi~reactionsDeleteForPullRequestCommentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a pull request comment reaction
     * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/pulls/comments/:comment_id/reactions/:reaction_id.`  Delete a reaction to a [pull request review comment](https://developer.github.com/v3/pulls/comments/).
     * @param {String} owner 
     * @param {String} repo 
     * @param {Number} commentId comment_id parameter
     * @param {Number} reactionId 
     * @param {module:api/ReactionsApi~reactionsDeleteForPullRequestCommentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reactionsDeleteForPullRequestComment(owner, repo, commentId, reactionId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling reactionsDeleteForPullRequestComment");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling reactionsDeleteForPullRequestComment");
      }
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling reactionsDeleteForPullRequestComment");
      }
      // verify the required parameter 'reactionId' is set
      if (reactionId === undefined || reactionId === null) {
        throw new Error("Missing the required parameter 'reactionId' when calling reactionsDeleteForPullRequestComment");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'comment_id': commentId,
        'reaction_id': reactionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactionsDeleteForTeamDiscussion operation.
     * @callback module:api/ReactionsApi~reactionsDeleteForTeamDiscussionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete team discussion reaction
     * **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions/:reaction_id`.  Delete a reaction to a [team discussion](https://developer.github.com/v3/teams/discussions/). OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param {String} org 
     * @param {String} teamSlug team_slug parameter
     * @param {Number} discussionNumber 
     * @param {Number} reactionId 
     * @param {module:api/ReactionsApi~reactionsDeleteForTeamDiscussionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reactionsDeleteForTeamDiscussion(org, teamSlug, discussionNumber, reactionId, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling reactionsDeleteForTeamDiscussion");
      }
      // verify the required parameter 'teamSlug' is set
      if (teamSlug === undefined || teamSlug === null) {
        throw new Error("Missing the required parameter 'teamSlug' when calling reactionsDeleteForTeamDiscussion");
      }
      // verify the required parameter 'discussionNumber' is set
      if (discussionNumber === undefined || discussionNumber === null) {
        throw new Error("Missing the required parameter 'discussionNumber' when calling reactionsDeleteForTeamDiscussion");
      }
      // verify the required parameter 'reactionId' is set
      if (reactionId === undefined || reactionId === null) {
        throw new Error("Missing the required parameter 'reactionId' when calling reactionsDeleteForTeamDiscussion");
      }

      let pathParams = {
        'org': org,
        'team_slug': teamSlug,
        'discussion_number': discussionNumber,
        'reaction_id': reactionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactionsDeleteForTeamDiscussionComment operation.
     * @callback module:api/ReactionsApi~reactionsDeleteForTeamDiscussionCommentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete team discussion comment reaction
     * **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id`.  Delete a reaction to a [team discussion comment](https://developer.github.com/v3/teams/discussion_comments/). OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param {String} org 
     * @param {String} teamSlug team_slug parameter
     * @param {Number} discussionNumber 
     * @param {Number} commentNumber 
     * @param {Number} reactionId 
     * @param {module:api/ReactionsApi~reactionsDeleteForTeamDiscussionCommentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reactionsDeleteForTeamDiscussionComment(org, teamSlug, discussionNumber, commentNumber, reactionId, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling reactionsDeleteForTeamDiscussionComment");
      }
      // verify the required parameter 'teamSlug' is set
      if (teamSlug === undefined || teamSlug === null) {
        throw new Error("Missing the required parameter 'teamSlug' when calling reactionsDeleteForTeamDiscussionComment");
      }
      // verify the required parameter 'discussionNumber' is set
      if (discussionNumber === undefined || discussionNumber === null) {
        throw new Error("Missing the required parameter 'discussionNumber' when calling reactionsDeleteForTeamDiscussionComment");
      }
      // verify the required parameter 'commentNumber' is set
      if (commentNumber === undefined || commentNumber === null) {
        throw new Error("Missing the required parameter 'commentNumber' when calling reactionsDeleteForTeamDiscussionComment");
      }
      // verify the required parameter 'reactionId' is set
      if (reactionId === undefined || reactionId === null) {
        throw new Error("Missing the required parameter 'reactionId' when calling reactionsDeleteForTeamDiscussionComment");
      }

      let pathParams = {
        'org': org,
        'team_slug': teamSlug,
        'discussion_number': discussionNumber,
        'comment_number': commentNumber,
        'reaction_id': reactionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactionsDeleteLegacy operation.
     * @callback module:api/ReactionsApi~reactionsDeleteLegacyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a reaction (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Reactions API. We recommend migrating your existing code to use the new delete reactions endpoints. For more information, see this [blog post](https://developer.github.com/changes/2020-02-26-new-delete-reactions-endpoints/).  OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), when deleting a [team discussion](https://developer.github.com/v3/teams/discussions/) or [team discussion comment](https://developer.github.com/v3/teams/discussion_comments/).
     * @param {Number} reactionId 
     * @param {module:api/ReactionsApi~reactionsDeleteLegacyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reactionsDeleteLegacy(reactionId, callback) {
      let postBody = null;
      // verify the required parameter 'reactionId' is set
      if (reactionId === undefined || reactionId === null) {
        throw new Error("Missing the required parameter 'reactionId' when calling reactionsDeleteLegacy");
      }

      let pathParams = {
        'reaction_id': reactionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/reactions/{reaction_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactionsListForCommitComment operation.
     * @callback module:api/ReactionsApi~reactionsListForCommitCommentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Reaction>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List reactions for a commit comment
     * List the reactions to a [commit comment](https://developer.github.com/v3/repos/comments/).
     * @param {String} owner 
     * @param {String} repo 
     * @param {Number} commentId comment_id parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.content Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to a commit comment.
     * @param {Number} opts.perPage Results per page (max 100) (default to 30)
     * @param {Number} opts.page Page number of the results to fetch. (default to 1)
     * @param {module:api/ReactionsApi~reactionsListForCommitCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Reaction>}
     */
    reactionsListForCommitComment(owner, repo, commentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling reactionsListForCommitComment");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling reactionsListForCommitComment");
      }
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling reactionsListForCommitComment");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'comment_id': commentId
      };
      let queryParams = {
        'content': opts['content'],
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Reaction];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/comments/{comment_id}/reactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactionsListForIssue operation.
     * @callback module:api/ReactionsApi~reactionsListForIssueCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Reaction>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List reactions for an issue
     * List the reactions to an [issue](https://developer.github.com/v3/issues/).
     * @param {String} owner 
     * @param {String} repo 
     * @param {Number} issueNumber issue_number parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.content Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to an issue.
     * @param {Number} opts.perPage Results per page (max 100) (default to 30)
     * @param {Number} opts.page Page number of the results to fetch. (default to 1)
     * @param {module:api/ReactionsApi~reactionsListForIssueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Reaction>}
     */
    reactionsListForIssue(owner, repo, issueNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling reactionsListForIssue");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling reactionsListForIssue");
      }
      // verify the required parameter 'issueNumber' is set
      if (issueNumber === undefined || issueNumber === null) {
        throw new Error("Missing the required parameter 'issueNumber' when calling reactionsListForIssue");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'issue_number': issueNumber
      };
      let queryParams = {
        'content': opts['content'],
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Reaction];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{issue_number}/reactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactionsListForIssueComment operation.
     * @callback module:api/ReactionsApi~reactionsListForIssueCommentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Reaction>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List reactions for an issue comment
     * List the reactions to an [issue comment](https://developer.github.com/v3/issues/comments/).
     * @param {String} owner 
     * @param {String} repo 
     * @param {Number} commentId comment_id parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.content Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to an issue comment.
     * @param {Number} opts.perPage Results per page (max 100) (default to 30)
     * @param {Number} opts.page Page number of the results to fetch. (default to 1)
     * @param {module:api/ReactionsApi~reactionsListForIssueCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Reaction>}
     */
    reactionsListForIssueComment(owner, repo, commentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling reactionsListForIssueComment");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling reactionsListForIssueComment");
      }
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling reactionsListForIssueComment");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'comment_id': commentId
      };
      let queryParams = {
        'content': opts['content'],
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Reaction];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactionsListForPullRequestReviewComment operation.
     * @callback module:api/ReactionsApi~reactionsListForPullRequestReviewCommentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Reaction>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List reactions for a pull request review comment
     * List the reactions to a [pull request review comment](https://developer.github.com/v3/pulls/comments/).
     * @param {String} owner 
     * @param {String} repo 
     * @param {Number} commentId comment_id parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.content Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to a pull request review comment.
     * @param {Number} opts.perPage Results per page (max 100) (default to 30)
     * @param {Number} opts.page Page number of the results to fetch. (default to 1)
     * @param {module:api/ReactionsApi~reactionsListForPullRequestReviewCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Reaction>}
     */
    reactionsListForPullRequestReviewComment(owner, repo, commentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling reactionsListForPullRequestReviewComment");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling reactionsListForPullRequestReviewComment");
      }
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling reactionsListForPullRequestReviewComment");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'comment_id': commentId
      };
      let queryParams = {
        'content': opts['content'],
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Reaction];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactionsListForTeamDiscussionCommentInOrg operation.
     * @callback module:api/ReactionsApi~reactionsListForTeamDiscussionCommentInOrgCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Reaction>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List reactions for a team discussion comment
     * List the reactions to a [team discussion comment](https://developer.github.com/v3/teams/discussion_comments/). OAuth access tokens require the `read:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
     * @param {String} org 
     * @param {String} teamSlug team_slug parameter
     * @param {Number} discussionNumber 
     * @param {Number} commentNumber 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.content Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to a team discussion comment.
     * @param {Number} opts.perPage Results per page (max 100) (default to 30)
     * @param {Number} opts.page Page number of the results to fetch. (default to 1)
     * @param {module:api/ReactionsApi~reactionsListForTeamDiscussionCommentInOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Reaction>}
     */
    reactionsListForTeamDiscussionCommentInOrg(org, teamSlug, discussionNumber, commentNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling reactionsListForTeamDiscussionCommentInOrg");
      }
      // verify the required parameter 'teamSlug' is set
      if (teamSlug === undefined || teamSlug === null) {
        throw new Error("Missing the required parameter 'teamSlug' when calling reactionsListForTeamDiscussionCommentInOrg");
      }
      // verify the required parameter 'discussionNumber' is set
      if (discussionNumber === undefined || discussionNumber === null) {
        throw new Error("Missing the required parameter 'discussionNumber' when calling reactionsListForTeamDiscussionCommentInOrg");
      }
      // verify the required parameter 'commentNumber' is set
      if (commentNumber === undefined || commentNumber === null) {
        throw new Error("Missing the required parameter 'commentNumber' when calling reactionsListForTeamDiscussionCommentInOrg");
      }

      let pathParams = {
        'org': org,
        'team_slug': teamSlug,
        'discussion_number': discussionNumber,
        'comment_number': commentNumber
      };
      let queryParams = {
        'content': opts['content'],
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Reaction];
      return this.apiClient.callApi(
        '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactionsListForTeamDiscussionCommentLegacy operation.
     * @callback module:api/ReactionsApi~reactionsListForTeamDiscussionCommentLegacyCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Reaction>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List reactions for a team discussion comment (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion comment`](https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion-comment) endpoint.  List the reactions to a [team discussion comment](https://developer.github.com/v3/teams/discussion_comments/). OAuth access tokens require the `read:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param {Number} teamId 
     * @param {Number} discussionNumber 
     * @param {Number} commentNumber 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.content Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to a team discussion comment.
     * @param {Number} opts.perPage Results per page (max 100) (default to 30)
     * @param {Number} opts.page Page number of the results to fetch. (default to 1)
     * @param {module:api/ReactionsApi~reactionsListForTeamDiscussionCommentLegacyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Reaction>}
     */
    reactionsListForTeamDiscussionCommentLegacy(teamId, discussionNumber, commentNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling reactionsListForTeamDiscussionCommentLegacy");
      }
      // verify the required parameter 'discussionNumber' is set
      if (discussionNumber === undefined || discussionNumber === null) {
        throw new Error("Missing the required parameter 'discussionNumber' when calling reactionsListForTeamDiscussionCommentLegacy");
      }
      // verify the required parameter 'commentNumber' is set
      if (commentNumber === undefined || commentNumber === null) {
        throw new Error("Missing the required parameter 'commentNumber' when calling reactionsListForTeamDiscussionCommentLegacy");
      }

      let pathParams = {
        'team_id': teamId,
        'discussion_number': discussionNumber,
        'comment_number': commentNumber
      };
      let queryParams = {
        'content': opts['content'],
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Reaction];
      return this.apiClient.callApi(
        '/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactionsListForTeamDiscussionInOrg operation.
     * @callback module:api/ReactionsApi~reactionsListForTeamDiscussionInOrgCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Reaction>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List reactions for a team discussion
     * List the reactions to a [team discussion](https://developer.github.com/v3/teams/discussions/). OAuth access tokens require the `read:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
     * @param {String} org 
     * @param {String} teamSlug team_slug parameter
     * @param {Number} discussionNumber 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.content Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to a team discussion.
     * @param {Number} opts.perPage Results per page (max 100) (default to 30)
     * @param {Number} opts.page Page number of the results to fetch. (default to 1)
     * @param {module:api/ReactionsApi~reactionsListForTeamDiscussionInOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Reaction>}
     */
    reactionsListForTeamDiscussionInOrg(org, teamSlug, discussionNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling reactionsListForTeamDiscussionInOrg");
      }
      // verify the required parameter 'teamSlug' is set
      if (teamSlug === undefined || teamSlug === null) {
        throw new Error("Missing the required parameter 'teamSlug' when calling reactionsListForTeamDiscussionInOrg");
      }
      // verify the required parameter 'discussionNumber' is set
      if (discussionNumber === undefined || discussionNumber === null) {
        throw new Error("Missing the required parameter 'discussionNumber' when calling reactionsListForTeamDiscussionInOrg");
      }

      let pathParams = {
        'org': org,
        'team_slug': teamSlug,
        'discussion_number': discussionNumber
      };
      let queryParams = {
        'content': opts['content'],
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Reaction];
      return this.apiClient.callApi(
        '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactionsListForTeamDiscussionLegacy operation.
     * @callback module:api/ReactionsApi~reactionsListForTeamDiscussionLegacyCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Reaction>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List reactions for a team discussion (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion`](https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion) endpoint.  List the reactions to a [team discussion](https://developer.github.com/v3/teams/discussions/). OAuth access tokens require the `read:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param {Number} teamId 
     * @param {Number} discussionNumber 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.content Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to a team discussion.
     * @param {Number} opts.perPage Results per page (max 100) (default to 30)
     * @param {Number} opts.page Page number of the results to fetch. (default to 1)
     * @param {module:api/ReactionsApi~reactionsListForTeamDiscussionLegacyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Reaction>}
     */
    reactionsListForTeamDiscussionLegacy(teamId, discussionNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling reactionsListForTeamDiscussionLegacy");
      }
      // verify the required parameter 'discussionNumber' is set
      if (discussionNumber === undefined || discussionNumber === null) {
        throw new Error("Missing the required parameter 'discussionNumber' when calling reactionsListForTeamDiscussionLegacy");
      }

      let pathParams = {
        'team_id': teamId,
        'discussion_number': discussionNumber
      };
      let queryParams = {
        'content': opts['content'],
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Reaction];
      return this.apiClient.callApi(
        '/teams/{team_id}/discussions/{discussion_number}/reactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}

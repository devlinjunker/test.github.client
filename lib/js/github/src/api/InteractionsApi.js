/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 0.0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineObject21 from '../model/InlineObject21';
import InlineObject78 from '../model/InlineObject78';
import InteractionLimit from '../model/InteractionLimit';
import ValidationError from '../model/ValidationError';

/**
* Interactions service.
* @module api/InteractionsApi
* @version 0.0.5
*/
export default class InteractionsApi {

    /**
    * Constructs a new InteractionsApi. 
    * @alias module:api/InteractionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the interactionsGetRestrictionsForOrg operation.
     * @callback module:api/InteractionsApi~interactionsGetRestrictionsForOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InteractionLimit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get interaction restrictions for an organization
     * Shows which group of GitHub users can interact with this organization and when the restriction expires. If there are no restrictions, you will see an empty response.
     * @param {String} org 
     * @param {module:api/InteractionsApi~interactionsGetRestrictionsForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InteractionLimit}
     */
    interactionsGetRestrictionsForOrg(org, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling interactionsGetRestrictionsForOrg");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InteractionLimit;
      return this.apiClient.callApi(
        '/orgs/{org}/interaction-limits', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the interactionsGetRestrictionsForRepo operation.
     * @callback module:api/InteractionsApi~interactionsGetRestrictionsForRepoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InteractionLimit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get interaction restrictions for a repository
     * Shows which group of GitHub users can interact with this repository and when the restriction expires. If there are no restrictions, you will see an empty response.
     * @param {String} owner 
     * @param {String} repo 
     * @param {module:api/InteractionsApi~interactionsGetRestrictionsForRepoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InteractionLimit}
     */
    interactionsGetRestrictionsForRepo(owner, repo, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling interactionsGetRestrictionsForRepo");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling interactionsGetRestrictionsForRepo");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InteractionLimit;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/interaction-limits', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the interactionsRemoveRestrictionsForOrg operation.
     * @callback module:api/InteractionsApi~interactionsRemoveRestrictionsForOrgCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove interaction restrictions for an organization
     * Removes all interaction restrictions from public repositories in the given organization. You must be an organization owner to remove restrictions.
     * @param {String} org 
     * @param {module:api/InteractionsApi~interactionsRemoveRestrictionsForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     */
    interactionsRemoveRestrictionsForOrg(org, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling interactionsRemoveRestrictionsForOrg");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/interaction-limits', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the interactionsRemoveRestrictionsForRepo operation.
     * @callback module:api/InteractionsApi~interactionsRemoveRestrictionsForRepoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove interaction restrictions for a repository
     * Removes all interaction restrictions from the given repository. You must have owner or admin access to remove restrictions.
     * @param {String} owner 
     * @param {String} repo 
     * @param {module:api/InteractionsApi~interactionsRemoveRestrictionsForRepoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    interactionsRemoveRestrictionsForRepo(owner, repo, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling interactionsRemoveRestrictionsForRepo");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling interactionsRemoveRestrictionsForRepo");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/interaction-limits', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the interactionsSetRestrictionsForOrg operation.
     * @callback module:api/InteractionsApi~interactionsSetRestrictionsForOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InteractionLimit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set interaction restrictions for an organization
     * Temporarily restricts interactions to certain GitHub users in any public repository in the given organization. You must be an organization owner to set these restrictions.
     * @param {String} org 
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject21} opts.inlineObject21 
     * @param {module:api/InteractionsApi~interactionsSetRestrictionsForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InteractionLimit}
     */
    interactionsSetRestrictionsForOrg(org, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject21'];
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling interactionsSetRestrictionsForOrg");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InteractionLimit;
      return this.apiClient.callApi(
        '/orgs/{org}/interaction-limits', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the interactionsSetRestrictionsForRepo operation.
     * @callback module:api/InteractionsApi~interactionsSetRestrictionsForRepoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InteractionLimit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set interaction restrictions for a repository
     * Temporarily restricts interactions to certain GitHub users within the given repository. You must have owner or admin access to set restrictions.
     * @param {String} owner 
     * @param {String} repo 
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject78} opts.inlineObject78 
     * @param {module:api/InteractionsApi~interactionsSetRestrictionsForRepoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InteractionLimit}
     */
    interactionsSetRestrictionsForRepo(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject78'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling interactionsSetRestrictionsForRepo");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling interactionsSetRestrictionsForRepo");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InteractionLimit;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/interaction-limits', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
